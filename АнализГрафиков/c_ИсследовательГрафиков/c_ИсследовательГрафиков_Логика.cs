using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using ZedGraph;
using АнализГрафиков.c_ЛистТочек;

namespace АнализГрафиков.c_ИсследовательГрафиков
{
    public partial class c_ИсследовательГрафиков
    { 
        /// <summary>
        /// Загружает серию из файла
        /// </summary>
        /// <param name="_путьКфайлу">Путь к файлу</param>
        /// <returns></returns>
        public bool f_Серия_ЗагрузитьИзФайла(string _путьКфайлу)
        {
            //проверка на наличие файла
            if (!File.Exists(_путьКфайлу))
                return false;

            var ИмяФайла = $"{_путьКфайлу.Split('\\').Last()}|";

            var ЛистТочек = new CustomStockPointList();

            var НоваяСерия = new c_Серия.c_Серия(ЛистТочек, $"{ИмяФайла}");
            
            iСписокСерий.Add(НоваяСерия);
            ob_График.GraphPane.CurveList.Add(НоваяСерия.iСвечи);

            using (FileStream fs = new FileStream(_путьКфайлу, FileMode.Open))
                f_Серия_ИнициализацияИзПотока(fs, НоваяСерия);

            ob_ЛистБоксСерий.Items.Add($"{ИмяФайла}({НоваяСерия.Count})", CheckState.Checked);

            if (iСписокСерий.IndexOf(НоваяСерия) > 1)
            {
                НоваяСерия.iСвечи.Stick.RisingFill.Color = Color.DarkGreen;
                НоваяСерия.iСвечи.Stick.FallingFill.Color = Color.DarkRed;
            }

            

            ob_График.AxisChange();
            ob_График.RestoreScale(ob_График.GraphPane);
            fp_ОбновитьНазванияСерий();

            return true;
        }

        /// <summary>
        /// Считывает поток построчно и записывает бары в ТекущаяСерия
        /// </summary>
        /// <param name="_поток">Поток с барами</param>
        /// <param name="_текущаяСерия">Серия, в которую будут считаны бары</param>
        /// <returns></returns>
        public bool f_Серия_ИнициализацияИзПотока(Stream _поток, c_Серия.c_Серия _текущаяСерия)
        {
            using (StreamReader sr = new StreamReader(_поток))
            {

                var ТочкиСерии = _текущаяСерия.iТочкиСерии;
                //используем хедеры как проверку правильности формата файла
                if (sr.ReadLine() != $"<DATE>\t<TIME>\t<OPEN>\t<HIGH>\t<LOW>\t<CLOSE>\t<TICKVOL>\t<VOL>\t<SPREAD>")
                {
                    MessageBox.Show("Неверный формат файла");
                    return false;
                }

                //Считываем одну строку вне цикла, чтоб узнать сколько знаков после запятой
                var ПерваяСтрока = sr.ReadLine().Split('\t');
                var ПерваяСтрока_Дата = ПерваяСтрока[0].Split('.');
                var ПерваяСтрока_Вермя = ПерваяСтрока[1].Split(':');
                
                ТочкиСерии.Add(new StockPt(new XDate(int.Parse(ПерваяСтрока_Дата[0]), int.Parse(ПерваяСтрока_Дата[1]), int.Parse(ПерваяСтрока_Дата[2]), int.Parse(ПерваяСтрока_Вермя[0]), int.Parse(ПерваяСтрока_Вермя[1]), int.Parse(ПерваяСтрока_Вермя[2])),
                    double.Parse(ПерваяСтрока[3], CultureInfo.InvariantCulture), //max
                    double.Parse(ПерваяСтрока[4], CultureInfo.InvariantCulture), //min
                    double.Parse(ПерваяСтрока[2], CultureInfo.InvariantCulture), //open
                    double.Parse(ПерваяСтрока[5], CultureInfo.InvariantCulture), //close
                    double.Parse(ПерваяСтрока[6], CultureInfo.InvariantCulture), //vol
                    int.Parse(ПерваяСтрока[8]).ToString()));                     //spread
                                                                                 //У zed grapha есть спец свободно поле Tag, его использую для хранения SPREAD

                //Записываем кол-во точек после запятой в класс серии
                _текущаяСерия.iЦифрПослеЗапятой = ПерваяСтрока[3].Split('.')[1].Length;

                while (!sr.EndOfStream)
                {
                    var СтрокаДанных = sr.ReadLine().Split('\t');

                    //TODO: избавится от Split - найти нужный конструктор для DateTime (как в функции сохранения если такой есть или написать свой форматер)
                    var Дата = СтрокаДанных[0].Split('.');
                    var Время = СтрокаДанных[1].Split(':');
                    
                    ТочкиСерии.Add(new StockPt(new XDate(int.Parse(Дата[0]), int.Parse(Дата[1]), int.Parse(Дата[2]), int.Parse(Время[0]), int.Parse(Время[1]), int.Parse(Время[2])),
                        double.Parse(СтрокаДанных[3], CultureInfo.InvariantCulture), //max
                        double.Parse(СтрокаДанных[4], CultureInfo.InvariantCulture), //min
                        double.Parse(СтрокаДанных[2], CultureInfo.InvariantCulture), //open
                        double.Parse(СтрокаДанных[5], CultureInfo.InvariantCulture), //close
                        double.Parse(СтрокаДанных[6], CultureInfo.InvariantCulture), //vol
                        int.Parse(СтрокаДанных[8]).ToString()));                     //spread
                    //У zed grapha есть спец свободно поле Tag, его использую для хранения SPREAD
                }
            }
            return true;
        }

        /// <summary>
        /// Сохраняет серию в файл
        /// </summary>
        /// <param name="_путьКФайлу">Путь к файлу</param>
        /// <returns></returns>
        public bool f_Серия_СохранитьВФайл(string _путьКФайлу)
        {
            using (FileStream fs = new FileStream(_путьКФайлу, FileMode.Create))
                return f_Серия_СохранитьВПоток(fs);
        }

        /// <summary>
        /// Сохраняет серию в поток
        /// </summary>
        /// <param name="_поток">Поток в который будут сохранены данные</param>
        /// <returns></returns>
        public bool f_Серия_СохранитьВПоток(Stream _поток)
        {
            //если серия не выбрана
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
            {
                MessageBox.Show("Выберете серию в списке");
                return false;
            }

            var ТочкиСерии = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iТочкиСерии;

            using (StreamWriter sw = new StreamWriter(_поток))
            {
                //записываем хедеры
                sw.WriteLine("<DATE>\t<TIME>\t<OPEN>\t<HIGH>\t<LOW>\t<CLOSE>\t<TICKVOL>\t<VOL>\t<SPREAD>");

                for (int i = 0; i < ТочкиСерии.Count; i++)
                {
                    var Точка = (StockPt)ТочкиСерии[i];

                    var СдвигПоВысоте = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигВысота;

                    var Дата = ((XDate)((StockPt)ТочкиСерии[i]).Date);

                    //Сдвиг даты для записи верных данных 
                    Дата.AddYears(-iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[0]);
                    Дата.AddMonths(-iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[1]);
                    Дата.AddDays(-iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[2]);
                    Дата.AddHours(-iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[3]);
                    Дата.AddMinutes(-iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[4]);
                    Дата.AddSeconds(-iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[5]);

                    //кол-во чисел после запятой
                    string Формат = $"F{iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iЦифрПослеЗапятой}";

                    sw.Write($"{Дата.DateTime.ToString("yyyy.MM.dd\tHH:mm:ss")}\t");
                    sw.WriteLine($"{(Точка.Open - СдвигПоВысоте).ToString(Формат, CultureInfo.InvariantCulture)}\t" +
                        $"{(Точка.High - СдвигПоВысоте).ToString(Формат, CultureInfo.InvariantCulture)}\t" +
                        $"{(Точка.Low - СдвигПоВысоте).ToString(Формат, CultureInfo.InvariantCulture)}\t" +
                        $"{(Точка.Close - СдвигПоВысоте).ToString(Формат, CultureInfo.InvariantCulture)}\t" +
                        $"{Точка.Vol.ToString(CultureInfo.InvariantCulture)}\t" +
                        $"{0}\t" +
                        $"{Точка.Tag}");
                }
            }
            return true;
        }

        /// <summary>
        /// Удаляет выбранную в ListBox'е серию
        /// </summary>
        /// <returns></returns>
        public bool f_Серия_Удалить()
        {
            //если серия не выбрана
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
            {
                MessageBox.Show("Выберете серию в списке");
                return false;
            }

            //Удаляем все данные связаные с серией, так как добавление их происходит вместе, индекс у них одинаковый
            ob_График.GraphPane.CurveList.RemoveAt(ob_ЛистБоксСерий.SelectedIndex);
            iСписокСерий.RemoveAt(ob_ЛистБоксСерий.SelectedIndex);
            //Важно этот элемет лист бокса удалять последним, так как в нём индкес
            ob_ЛистБоксСерий.Items.RemoveAt(ob_ЛистБоксСерий.SelectedIndex);

            //ob_График1.RestoreScale(ob_График1.GraphPane);
            ob_График.GraphPane.AxisChange();
            fp_ОбновитьНазванияСерий();

            return true;
        }

        /// <summary>
        /// Двигает выбранную в ListBox'е серию на время указанное в параметрах
        /// </summary>
        /// <param name="_лет"></param>
        /// <param name="_месяц"></param>
        /// <param name="_дней"></param>
        /// <param name="_час"></param>
        /// <param name="_мин"></param>
        /// <param name="_сек"></param>
        public void f_Серия_СдвинутьПоВремени(double _лет = 0d, double _месяц = 0d, double _дней = 0d,
                                            double _час = 0d, double _мин = 0d, double _сек = 0d)
        {
            //если серия не выбрана
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            //Записываем сдвиг, чтоб потом правильно сохранить без сдвига
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[0] += _лет;
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[1] += _месяц;
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[2] += _дней;
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[3] += _час;
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[4] += _мин;
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[5] += _сек;

            var ТочкиСерии = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iТочкиСерии;
            // сдвиг полной
            for (int i = 0; i < ТочкиСерии.Count; i++)
            {
                var Точка = (StockPt)ТочкиСерии[i];
                //важно перевести, чтоб сделать корректный переход
                var Дата = (XDate)Точка.Date;

                Дата.AddYears(_лет);
                Дата.AddMonths(_месяц);
                Дата.AddDays(_дней);
                Дата.AddHours(_час);
                Дата.AddMinutes(_мин);
                Дата.AddSeconds(_сек);

                //X хранит значение даты
                ТочкиСерии[i].X = Дата;
            }

            ob_График.GraphPane.AxisChange();
            ob_График.Invalidate();
        }

        /// <summary>
        /// Вызывает окно перехода к выбранной дате
        /// </summary>
        public void f_Серия_ПерейтиКДате()
        {
            var СписокСерий = iСписокСерий.Skip(iГрафическихЭлементов).ToList();

            if (СписокСерий.Count < 1)
                return;

            var ПервыйБарГлавнойДата = ((XDate)СписокСерий[0].iТочкиСерии[0].X).DateTime;

            using (Окна.c_ОкноВыбораДаты.c_ОкноВыбораДаты Окно = new Окна.c_ОкноВыбораДаты.c_ОкноВыбораДаты(ПервыйБарГлавнойДата))
            {
                if (Окно.ShowDialog() == DialogResult.OK)
                {
                    fp_ПерейтиКДате(new XDate(Окно.iДата));
                }
                else
                    return;
            }

            
            //var ВыбраннаяСерия = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex];

            //var ИскомаяДата = new XDate(_лет, _месяц, _дней, _час, _мин, _сек);

            //var НайденыйБар = ВыбраннаяСерия.iТочкиСерии.FirstOrDefault(бар => бар.Date == ИскомаяДата);

            //if (НайденыйБар == null)
            //{
            //    MessageBox.Show("Бара с такой датой нет");
            //    return;
            //}

            //fp_ПоказатьБар(НайденыйБар);
        }

        /// <summary>
        /// Двигает выбранный график по вертикали
        /// </summary>
        /// <param name="_высота">Значение дожно быть маленьким(к примеру -0.001d)</param>
        public void f_Серия_СдвинутьВертикально(double _высота)
        {
            //если серия не выбрана
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            //Сохраняем общий сдвиг по высоте
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигВысота += _высота;

            var ТочкиСерии = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iТочкиСерии;

            // сдвиг полной
            for (int i = 0; i < ТочкиСерии.Count; i++)
            {
                var Точка = (StockPt)ТочкиСерии[i];

                Точка.Open += _высота;
                Точка.High += _высота;
                Точка.Low += _высота;
                Точка.Close += _высота;
            }

            ob_График.GraphPane.AxisChange();
            ob_График.Invalidate();
        }

        /// <summary>
        /// Невелирует вертикальный сдвиг у выбранной серии, если таковой имеется
        /// </summary>
        public void f_Серия_НевелироватьВертикальныйСдвиг()
        {
            //если серия не выбрана
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            var ТочкиСерии = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iТочкиСерии;

            var СдвигНазад = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигВысота;

            // сдвиг полной
            for (int i = 0; i < ТочкиСерии.Count; i++)
            {
                var Точка = (StockPt)ТочкиСерии[i];

                Точка.Open -= СдвигНазад;
                Точка.High -= СдвигНазад;
                Точка.Low -= СдвигНазад;
                Точка.Close -= СдвигНазад;
            }

            //Теперь сдвиг равено 0
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигВысота = 0;

            ob_График.GraphPane.AxisChange();
            ob_График.Invalidate();
        }

        /// <summary>
        /// Удаляет все двойные бары выбранной серии
        /// </summary>
        public void f_Серия_УдалитьДвойныеБары()
        {
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            fp_УдалитьДвойныеБарыСерии(iСписокСерий[ob_ЛистБоксСерий.SelectedIndex]);
        }

        /// <summary>
        /// Перерисовывает график с учётом максимального количества отрисовываемых баров на серию
        /// </summary>
        /// <param name="newZoomState">Стейт зум после изменения, нужен для отлючения сжатия по Х, если мы крутим колёсико</param>
        public void f_ПерерисоватьГрафик(ZoomState oldZoomState = null, ZoomState newZoomState = null)
        {
            var График = ob_График.GraphPane;

            //Точки считаю по Оси Х, для удоства ось в перем
            var ОсьХ = ob_График.GraphPane.XAxis.Scale;

            ОсьХ.Format = "dd-MM-yyyy hh:mm";

            //Рисовать каждый бар за границами со след шагом
            int ШагОтрисовкиЗаВыделением = 200;

            //Через какой промежуток отрисовывать в области выделения
            int ШагОтрисовкиВнутриВыделения = 1;

            //Максимальное кол-во отрисованных точек внутри
            int МаксимумОтрисованТочек = iМаксОтрисовываемыхБаровНаСерию;


            //Для выравнивания по У
            double? МаксY = null;
            double? МинY = null;

            //Для выравнивания по X
            double? МаксХ = null;
            double? МинХ = null;

            //Если выделели 2 между баров(очень маленькое выделение), игнорируем такое выделение
            if (newZoomState?.Type == ZoomState.StateType.Zoom && ОсьХ.Max - ОсьХ.Min < 0.001)
            {
                ob_График.GraphPane.ZoomStack.Last().ApplyState(ob_График.GraphPane);
                ob_График.Invalidate();
                return;
            }    
                

            foreach (var ТекущаяСерия in iСписокСерий.Skip(1))
            {
                if (!ob_График.GraphPane.CurveList[iСписокСерий.IndexOf(ТекущаяСерия)].IsVisible)
                    continue;

                

                var ТочкиСерии = ТекущаяСерия.iТочкиСерии;

                int ИндексПервойТочки = -1;

                if (ТочкиСерии.Count == 0 || ТочкиСерии[0].X > ОсьХ.Max)
                    continue;


                for (int i = 0; i < ТочкиСерии.Count; i++)
                    if (ТочкиСерии[i].X > ОсьХ.Min)
                    {
                        ИндексПервойТочки = i;
                        break;
                    }


                if (ИндексПервойТочки == -1)
                    continue;

                int ИндексПоследТочки = -1;

                for (int i = ИндексПервойТочки; i < ТочкиСерии.Count; i++)
                    if (ТочкиСерии[i].X > ОсьХ.Max)
                    {
                        ИндексПоследТочки = i - 1;
                        break;
                    }


                if (ИндексПоследТочки == -1)
                    ИндексПоследТочки = ТочкиСерии.Count - 1;

                //Количество свеч на экране (в выделеном участке)
                int КолвоВыделенныйТочек = ИндексПоследТочки - ИндексПервойТочки;

                //Умножаем на три потому что в бока(лево право) хоть мы их не видим но отрисовыем кол-во равное _количествоСвеч. И того Лево+Середи+Право(х+х+х = 3х)
                if (КолвоВыделенныйТочек * 3 > МаксимумОтрисованТочек)
                    ШагОтрисовкиВнутриВыделения = КолвоВыделенныйТочек / МаксимумОтрисованТочек;
                else
                    ШагОтрисовкиВнутриВыделения = 1;

                if (ШагОтрисовкиВнутриВыделения == 0)
                    ШагОтрисовкиВнутриВыделения = 1;

                var УкороченаяСерия = new CustomStockPointList();


                int НачалоОтрисовки = ИндексПервойТочки - КолвоВыделенныйТочек;

                int КонецОтрисовки = ИндексПоследТочки + КолвоВыделенныйТочек;

                if (КонецОтрисовки > ТочкиСерии.Count)
                    КонецОтрисовки = ТочкиСерии.Count;

                if (НачалоОтрисовки < 0)
                    НачалоОтрисовки = 0;

                //Добавляем точки ДО выделения(до левого промежутка)
                for (int i = 0; i < НачалоОтрисовки; i += ШагОтрисовкиЗаВыделением)
                    УкороченаяСерия.Add(ТочкиСерии[i]);
                //Середина
                for (int i = НачалоОтрисовки; i < КонецОтрисовки; i += ШагОтрисовкиВнутриВыделения)
                    УкороченаяСерия.Add(ТочкиСерии[i]);
                //Добавлем точки ПОСЛЕ выделения
                for (int i = КонецОтрисовки; i < ТочкиСерии.Count; i += ШагОтрисовкиЗаВыделением)
                    УкороченаяСерия.Add(ТочкиСерии[i]);

                ob_График.GraphPane.CurveList[iСписокСерий.IndexOf(ТекущаяСерия)].Points = УкороченаяСерия;


                //Код сжатия по Х

                if (МинХ == null)
                    МинХ = ТочкиСерии[ИндексПервойТочки].X;
                if (МаксХ == null)
                    МаксХ = ТочкиСерии[ИндексПоследТочки].X;

                var t = (XDate)МаксХ;
                var t1 = (XDate)МинХ;

                if (ТочкиСерии[ИндексПервойТочки].X < МинХ)
                    МинХ = ТочкиСерии[ИндексПервойТочки].X;
                if (ТочкиСерии[ИндексПоследТочки].X > МаксХ)
                    МаксХ = ТочкиСерии[ИндексПоследТочки].X;



                //Код сжатия по Y
                if (!ob_ПрижатьПоY.Checked)
                    continue;

                //Находим макс и мин У на выделенном отрезке
                var ТочкиВнутриВыделения = ТочкиСерии.Skip(ИндексПервойТочки).Take(КолвоВыделенныйТочек);

                //Если увеличить на столько, что на экране точек будет 0, _внутриВыделения.Max(p => p.Y); выдаст исключение
                if (ТочкиВнутриВыделения.Count() == 0)
                    continue;

                var МаксYВнутриВыделения = ТочкиВнутриВыделения.Max(p => p.High);
                var МигYВнутриВыделения = ТочкиВнутриВыделения.Min(p => p.Low);

                //нужно для первого прохода
                if (МинY == null)
                    МинY = МигYВнутриВыделения;
                if (МаксY == null)
                    МаксY = МаксYВнутриВыделения;

                if (МигYВнутриВыделения < МинY)
                    МинY = МигYВнутриВыделения;

                if (МаксYВнутриВыделения > МаксY)
                    МаксY = МаксYВнутриВыделения;


            }
            //Стоит ли чек бокс
            if (ob_ПрижатьПоY.Checked)
            {
                if (МаксY != null && МинY != null)
                {
                    var Дельта = Math.Abs((double)(МаксY - МинY));

                    ob_График.GraphPane.YAxis.Scale.Max = (double)МаксY + ((double)Дельта / 30);
                    ob_График.GraphPane.YAxis.Scale.Min = (double)МинY - ((double)Дельта / 30);

                    ob_ВысотаПарам.Value = (decimal)Дельта / 10;
                }
                else
                {
                    ob_График.GraphPane.ZoomStack.Last().ApplyState(ob_График.GraphPane);
                    ob_График.Invalidate();
                    return;
                }
            }
            
                
            
                

            //Если перерисовка вызвана внутри кода, а не из польз. интерфейса
            if (newZoomState == null)
                newZoomState = ob_График.GraphPane.ZoomStack.Last();

            //Стоит ли чек бокс
            if (ob_ПрижатьПоX.Checked && newZoomState.Type != ZoomState.StateType.WheelZoom)
                if (МаксХ != null && МинХ != null)
                {
                    var Дельта = (double)(МаксХ - МинХ);  //new XDate(0, 0, 0, 0, 1, 0);

                    ob_График.GraphPane.XAxis.Scale.Max = (double)(МаксХ + (Дельта / 50));
                    ob_График.GraphPane.XAxis.Scale.Min = (double)(МинХ - (Дельта / 50));
                }


            ob_График.AxisChange();
            ob_График.Invalidate();
        }

        /// <summary>
        /// Меняет отображение выбранной серии со свечей на бары
        /// </summary>
        public void f_Серия_ОтображатьБарами()
        {
            //если серия не выбрана
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iБары.Points = ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex].Points;
            ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex] = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iБары;

            ob_График.AxisChange();
            ob_График.Invalidate();
        }

        /// <summary>
        /// Меняет отображение выбранной серии с баров на свечи
        /// </summary>
        public void f_Серия_ОтображатьСвечами()
        {
            //если серия не выбрана
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСвечи.Points = ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex].Points;
            ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex] = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСвечи;

            ob_График.AxisChange();
            ob_График.Invalidate();
        }

        /// <summary>
        /// Удаляет все одинокие бары в выбранной серии
        /// Одиноким считаеться бар, у которого нет соседий в радиусе _отступМинут минут
        /// </summary>
        /// <param name="_порогМинут">Порог минут, после которого мы считаем бар одиноким</param>
        public void f_Серия_УдалитьОдинокиеБары()
        {
            using (Окна.c_ОкноИзменитьПараметр.c_ОкноИзменитьПараметр Окно = new Окна.c_ОкноИзменитьПараметр.c_ОкноИзменитьПараметр(
                "Настройки удаления одиноких баров",
                "Порог минут для бара, после которого бар считается одиноким",
                iУдалениеОдинокихБаров_ПорогМинут,
                0,
                10000,
                3))
            {
                if (Окно.ShowDialog() == DialogResult.OK)
                    iУдалениеОдинокихБаров_ПорогМинут = (int)Окно.ЗначениеПараметра;
            }

            if (iУдалениеОдинокихБаров_ПорогМинут < 2)
                return;

            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            var ВыбраннаяСерия = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex];

            StockPt ТекущаяТочка = (StockPt)ВыбраннаяСерия.iТочкиСерии[0];

            //Столько равна разность двух XDate в 1 минуту
            var Дата = new XDate(1899, 12, 29, 23, 59, 00);

            //Нужно учитывать что 1 минута уже есть, а 1 минута идёт на погрешность сравнения double'ов т.к. даты XDate в точках храняться как double
            Дата.AddMinutes(-((int)iУдалениеОдинокихБаров_ПорогМинут - 2));

            var ПорогВремени = (double)Дата;

            bool ТекущийОдинокий = true;

            var УдаленоБаров = 0;

            for (int i = 1; i < ВыбраннаяСерия.Count; i++)
            {
                StockPt СледТочка = (StockPt)ВыбраннаяСерия.iТочкиСерии[i];

                if (((ТекущаяТочка.Date - СледТочка.Date) < ПорогВремени))
                {
                    if (ТекущийОдинокий)
                    {
                        УдаленоБаров++;
                        ВыбраннаяСерия.iТочкиСерии.Remove(ТекущаяТочка);
                        i--;
                    }

                    ТекущаяТочка = СледТочка;
                    ТекущийОдинокий = true;
                    continue;
                }
                ТекущаяТочка = СледТочка;
                ТекущийОдинокий = false;
            }

            if (ТекущийОдинокий)
                ВыбраннаяСерия.iТочкиСерии.RemoveAt(ВыбраннаяСерия.Count - 1);

            MessageBox.Show($"Удалено {УдаленоБаров} одиноких баров");

            ob_График.RestoreScale(ob_График.GraphPane);
            fp_ОбновитьНазванияСерий();
        }

        /// <summary>
        /// Выполняет поиск аномальных баров в главной(первой) серии
        /// Для поиска должна быть загруженна донорская серии, т.к. алгоритм поиска задействует обе серии
        /// </summary>
        public void f_ПоискАномальныхБаровВГлавнойСерии()
        {
            //Т.к. в списке серий 1 элемент пустышка и нужен только для правильной синхронизации с ob_ЛистомБаров по индексу,
            //далее будем работать с укорочем листом
            var СписокСерий = iСписокСерий.Skip(iГрафическихЭлементов).ToList();

            //Если загруженно меньше 2х серий, нет смысла что-то сравнивать, 
            if (СписокСерий.Count < 2)
                return;

            using (Окна.c_ОкноПоискАномальныхБаров.c_ОкноПоискАномальныхБаров Окно = new Окна.c_ОкноПоискАномальныхБаров.c_ОкноПоискАномальныхБаров(
                iПоискАномальныхБаров_КритерийРасхождения,
                iПоискАномальныхБаров_УчитыватьНулевыеБары,
                iПоискАномальныхБаров_КритерийНулевогоБара))
            {
                Окно.ShowDialog();
                if (Окно.DialogResult == DialogResult.OK)
                {
                    iПоискАномальныхБаров_КритерийРасхождения = Окно.iКритерийРасхождения;
                    iПоискАномальныхБаров_УчитыватьНулевыеБары = Окно.iИгнорироватьНулевыеБары;

                    if (iПоискАномальныхБаров_УчитыватьНулевыеБары)
                        iПоискАномальныхБаров_КритерийНулевогоБара = Окно.iКритерийНулевогоБара;
                }
                else if (Окно.DialogResult == DialogResult.Cancel)
                    return;
            }


            iОсобыеБары.Clear();

            int БаровВУчастке = 1440; 

            var БарыГлавн = СписокСерий[0].iТочкиСерии;

            var БарыДонор = СписокСерий[1].iТочкиСерии;

            int БаровВТекущемУчастке = 0;

            List<double> СредняяВысотаБарыНаУчастке = new List<double> { 0d };
            

            for (int j = 0, k = 0; j < БарыГлавн.Count & k < БарыДонор.Count;)
            {
                var БарГлавн = (StockPt)БарыГлавн[j];
                var БарДонор = (StockPt)БарыДонор[k];

                var БарГлавнДата = ((XDate)БарГлавн.Date).DateTime;
                var БарДонорДата = ((XDate)БарДонор.Date).DateTime;

                if (БарГлавнДата < БарДонорДата)
                {
                    j++;
                    continue;
                }

                if (БарДонорДата < БарГлавнДата)
                {
                    k++;
                    continue;
                }

                БаровВТекущемУчастке++;
                СредняяВысотаБарыНаУчастке[СредняяВысотаБарыНаУчастке.Count - 1] += Math.Abs(БарГлавн.Open - БарГлавн.Close);

                if (БаровВТекущемУчастке == БаровВУчастке)
                {
                    СредняяВысотаБарыНаУчастке[СредняяВысотаБарыНаУчастке.Count - 1] /= БаровВТекущемУчастке;

                    СредняяВысотаБарыНаУчастке.Add(0d);

                    БаровВТекущемУчастке = 0;
                }

                j++;
                k++;
            }

            if (БаровВТекущемУчастке != 0)
            {
                СредняяВысотаБарыНаУчастке[СредняяВысотаБарыНаУчастке.Count - 1] /= БаровВТекущемУчастке;
            }

            БаровВТекущемУчастке = 0;

            for (int j = 0, k = 0; j < БарыГлавн.Count & k < БарыДонор.Count;)
            {
                var БарГлавн = (StockPt)БарыГлавн[j];
                var БарДонор = (StockPt)БарыДонор[k];

                var БарГлавнДата = ((XDate)БарГлавн.Date).DateTime;
                var БарДонорДата = ((XDate)БарДонор.Date).DateTime;

                if (БарГлавнДата < БарДонорДата)
                {
                    j++;
                    continue;
                }

                if (БарДонорДата < БарГлавнДата)
                {
                    k++;
                    continue;
                }

                БаровВТекущемУчастке++;


                var ДельтаОЗГлавн = Math.Abs(БарГлавн.Open - БарГлавн.Close);
                var ДельтаОЗДонор = Math.Abs(БарДонор.Open - БарДонор.Close);

                if (iПоискАномальныхБаров_УчитыватьНулевыеБары)
                    if (СредняяВысотаБарыНаУчастке[БаровВТекущемУчастке / БаровВУчастке] / ДельтаОЗГлавн > (double)iПоискАномальныхБаров_КритерийНулевогоБара ||
                        СредняяВысотаБарыНаУчастке[БаровВТекущемУчастке / БаровВУчастке] / ДельтаОЗДонор > (double)iПоискАномальныхБаров_КритерийНулевогоБара)
                    {
                        j++;
                        k++;
                        continue;
                    }
                

                

                var БольшаяДельтаОЗ = Math.Max(ДельтаОЗГлавн, ДельтаОЗДонор);
                var МеньшаяДельтаОЗ = Math.Min(ДельтаОЗГлавн, ДельтаОЗДонор);

                var ДельтаММГлавн = Math.Abs(БарГлавн.High - БарГлавн.Low);
                var ДельтаММДонор = Math.Abs(БарДонор.High - БарДонор.Low);

                var БольшаяДельтаММ = Math.Max(ДельтаММГлавн, ДельтаММДонор);
                var МеньшаяДельтаММ = Math.Min(ДельтаММГлавн, ДельтаММДонор);

                if (((БольшаяДельтаОЗ / МеньшаяДельтаОЗ) > (double)iПоискАномальныхБаров_КритерийРасхождения) || ((БольшаяДельтаММ / МеньшаяДельтаММ) > (double)iПоискАномальныхБаров_КритерийРасхождения))
                    iОсобыеБары.Add(БарГлавн);
                
                j++;
                k++;
            }

            iАномальныеБары = iОсобыеБары;

            if (iОсобыеБары.Count > 0)
                iИндексОсобогоБара = 0;
            else
                iИндексОсобогоБара = -1;
            MessageBox.Show($"Найдено {iОсобыеБары.Count} баров");
        }

        /// <summary>
        /// Заменяет все аномальные бары главной серии барами донорской
        /// </summary>
        public void f_ЗаменитьВсеАномальныеБары()
        {
            //Т.к. в списке серий 1 элемент пустышка и нужен только для правильной синхронизации с ob_ЛистомБаров по индексу,
            //далее будем работать с укорочем листом
            var СписокСерий = iСписокСерий.Skip(iГрафическихЭлементов).ToList();

            //Если загруженно меньше 2х серий, нет смысла что-то сравнивать, 
            if (СписокСерий.Count < 2)
                return;

            int БаровВУчастке = 1440;

            var БарыГлавн = СписокСерий[0].iТочкиСерии;
            var БарыДонор = СписокСерий[1].iТочкиСерии;

            var ВертикальныйСдвигГлавн = СписокСерий[0].iСдвигВысота;
            var ВертикальныйСдвигДонор = СписокСерий[1].iСдвигВысота;

            int БаровВТекущемУчастке = 0;

            List<double> СредняяВысотаБарыНаУчастке = new List<double> { 0d };


            for (int j = 0, k = 0; j < БарыГлавн.Count & k < БарыДонор.Count;)
            {
                var БарГлавн = (StockPt)БарыГлавн[j];
                var БарДонор = (StockPt)БарыДонор[k];

                var БарГлавнДата = ((XDate)БарГлавн.Date).DateTime;
                var БарДонорДата = ((XDate)БарДонор.Date).DateTime;

                if (БарГлавнДата < БарДонорДата)
                {
                    j++;
                    continue;
                }

                if (БарДонорДата < БарГлавнДата)
                {
                    k++;
                    continue;
                }

                БаровВТекущемУчастке++;
                СредняяВысотаБарыНаУчастке[СредняяВысотаБарыНаУчастке.Count - 1] += Math.Abs(БарГлавн.Open - БарГлавн.Close);

                if (БаровВТекущемУчастке == БаровВУчастке)
                {
                    СредняяВысотаБарыНаУчастке[СредняяВысотаБарыНаУчастке.Count - 1] /= БаровВТекущемУчастке;

                    СредняяВысотаБарыНаУчастке.Add(0d);

                    БаровВТекущемУчастке = 0;
                }

                j++;
                k++;
            }

            if (БаровВТекущемУчастке != 0)
            {
                СредняяВысотаБарыНаУчастке[СредняяВысотаБарыНаУчастке.Count - 1] /= БаровВТекущемУчастке;
            }

            БаровВТекущемУчастке = 0;

            int БаровЗаменено = 0;

            for (int j = 0, k = 0; j < БарыГлавн.Count & k < БарыДонор.Count;)
            {
                var БарГлавн = (StockPt)БарыГлавн[j];
                var БарДонор = (StockPt)БарыДонор[k];

                var БарГлавнДата = ((XDate)БарГлавн.Date).DateTime;
                var БарДонорДата = ((XDate)БарДонор.Date).DateTime;

                if (БарГлавнДата < БарДонорДата)
                {
                    j++;
                    continue;
                }

                if (БарДонорДата < БарГлавнДата)
                {
                    k++;
                    continue;
                }

                БаровВТекущемУчастке++;


                var ДельтаОЗГлавн = Math.Abs(БарГлавн.Open - БарГлавн.Close);
                var ДельтаОЗДонор = Math.Abs(БарДонор.Open - БарДонор.Close);

                if (iПоискАномальныхБаров_УчитыватьНулевыеБары)
                    if (СредняяВысотаБарыНаУчастке[БаровВТекущемУчастке / БаровВУчастке] / ДельтаОЗГлавн > (double)iПоискАномальныхБаров_КритерийНулевогоБара ||
                        СредняяВысотаБарыНаУчастке[БаровВТекущемУчастке / БаровВУчастке] / ДельтаОЗДонор > (double)iПоискАномальныхБаров_КритерийНулевогоБара)
                    {
                        j++;
                        k++;
                        continue;
                    }




                var БольшаяДельтаОЗ = Math.Max(ДельтаОЗГлавн, ДельтаОЗДонор);
                var МеньшаяДельтаОЗ = Math.Min(ДельтаОЗГлавн, ДельтаОЗДонор);

                var ДельтаММГлавн = Math.Abs(БарГлавн.High - БарГлавн.Low);
                var ДельтаММДонор = Math.Abs(БарДонор.High - БарДонор.Low);

                var БольшаяДельтаММ = Math.Max(ДельтаММГлавн, ДельтаММДонор);
                var МеньшаяДельтаММ = Math.Min(ДельтаММГлавн, ДельтаММДонор);

                if (((БольшаяДельтаОЗ / МеньшаяДельтаОЗ) > (double)iПоискАномальныхБаров_КритерийРасхождения) || ((БольшаяДельтаММ / МеньшаяДельтаММ) > (double)iПоискАномальныхБаров_КритерийРасхождения))
                {
                    БарГлавн.High = БарДонор.High + ВертикальныйСдвигГлавн - ВертикальныйСдвигДонор;
                    БарГлавн.Low = БарДонор.Low + ВертикальныйСдвигГлавн - ВертикальныйСдвигДонор;
                    БарГлавн.Open = БарДонор.Open + ВертикальныйСдвигГлавн - ВертикальныйСдвигДонор;
                    БарГлавн.Close = БарДонор.Close + ВертикальныйСдвигГлавн - ВертикальныйСдвигДонор;
                    БарГлавн.Vol = БарДонор.Vol;
                    БарГлавн.Tag = БарДонор.Tag;
                    БаровЗаменено++;
                }

                j++;
                k++;
            }

            iАномальныеБары = iОсобыеБары;

            if (iОсобыеБары.Count > 0)
                iИндексОсобогоБара = 0;
            else
                iИндексОсобогоБара = -1;
            MessageBox.Show($"Заменено {БаровЗаменено} баров");

            ob_График.Invalidate();
        }

        /// <summary>
        /// Показывает предыдущий бар хранящийся в списке iАномальныеБары
        /// </summary>
        public void f_ПоказатьПредБар()
        {
            if (iИндексОсобогоБара == -1)
                return;

            if (iИндексОсобогоБара != 0)
                iИндексОсобогоБара--;

            fp_ПоказатьАномальныйБар((StockPt)iОсобыеБары[iИндексОсобогоБара]);
        }

        /// <summary>
        /// /// Показывает следующий бар хранящийся в списке iАномальныеБары
        /// </summary>
        public void f_ПоказатьСледБар()
        {
            if (iИндексОсобогоБара == -1)
                return;

            if (iИндексОсобогоБара != iОсобыеБары.Count - 1)
                iИндексОсобогоБара++;

            fp_ПоказатьАномальныйБар((StockPt)iОсобыеБары[iИндексОсобогоБара]);
        }

        /// <summary>
        /// Заменяет выбранный бар из донорской серии в главную
        /// Выбранный это текущий бар в списке iАномальныеБары с индексом iИндексТекущейАномальнойТочки
        /// </summary>
        public void f_ЗаменитьВыбранныйБар()
        {
            if (iИндексОсобогоБара == -1)
                return;

            if (iВыбранныйБар == null)
                return;

            //Т.к. в списке серий 1 элемент пустышка и нужен только для правильной синхронизации с ob_ЛистомБаров по индексу,
            //далее будем работать с укорочем листом
            var СписокСерий = iСписокСерий.Skip(iГрафическихЭлементов).ToList();


            //TODO: Код можно сильно сократить. Спросить об этом Вадима
            var БарГлавн = (StockPt)iОсобыеБары[iИндексОсобогоБара];
            var БарДонор = СписокСерий[1].iТочкиСерии.First(p => p.Date == ((StockPt)iОсобыеБары[iИндексОсобогоБара]).Date);

            if(БарДонор == null)
            {
                MessageBox.Show("Для данного бары не найдено соответ. бара в донорской серии для замены");
                return;
            }

            var ВертикальныйСдвигГлавн = СписокСерий[0].iСдвигВысота;
            var ВертикальныйСдвигДонор = СписокСерий[1].iСдвигВысота;


            //var СерединаГлавной = (БарГлавн.Open + БарГлавн.Close) / 2;
            //var СерединаПробной = (БарДонор.Open + БарДонор.Close) / 2;

            //var СдвигВверх = СерединаГлавной - СерединаПробной;


            //iАномальныеТочки[iИндексТекущейАномальнойТочки] = iСписокСерий[1].iТочкиСерии.First(p => p.Date == ((StockPt)iАномальныеТочки[iИндексТекущейАномальнойТочки]).Date);
            //((StockPt)iОсобыеБары[iИндексОсобогоБара]).Open = БарДонор.Open + СдвигВверх;
            //((StockPt)iОсобыеБары[iИндексОсобогоБара]).High = БарДонор.High + СдвигВверх;
            //((StockPt)iОсобыеБары[iИндексОсобогоБара]).Low = БарДонор.Low + СдвигВверх;
            //((StockPt)iОсобыеБары[iИндексОсобогоБара]).Close = БарДонор.Close + СдвигВверх;
            //((StockPt)iОсобыеБары[iИндексОсобогоБара]).Vol = БарДонор.Vol;

            БарГлавн.High = БарДонор.High + ВертикальныйСдвигГлавн - ВертикальныйСдвигДонор;
            БарГлавн.Low = БарДонор.Low + ВертикальныйСдвигГлавн - ВертикальныйСдвигДонор;
            БарГлавн.Open = БарДонор.Open + ВертикальныйСдвигГлавн - ВертикальныйСдвигДонор;
            БарГлавн.Close = БарДонор.Close + ВертикальныйСдвигГлавн - ВертикальныйСдвигДонор;
            БарГлавн.Vol = БарДонор.Vol;
            БарГлавн.Tag = БарДонор.Tag;

            ob_ЦенаОтрытияБара.Value = (decimal)iВыбранныйБар.Open;
            ob_ЦенаМаксБара.Value = (decimal)iВыбранныйБар.High;
            ob_ЦенаМинБара.Value = (decimal)iВыбранныйБар.Low;
            ob_ЦенаЗакрытияБара.Value = (decimal)iВыбранныйБар.Close;
            ob_ОбъёмБара.Value = (decimal)iВыбранныйБар.Vol;

            //e_СледАномальныйБар_Click(null, null);

            ob_График.Invalidate();
        }

        /// <summary>
        /// Копирует из донорской серии в главную отсутствующие бары
        /// Отсутствующие бары, такие бары которые есть в донорской, но отсутствуют в главной по дате
        /// </summary>
        public void f_ЗаменитьПустыеБарыВГлавнойСерии()
        {
            //Т.к. в списке серий 1 элемент пустышка и нужен только для правильной синхронизации с ob_ЛистомБаров по индексу,
            //далее будем работать с укорочем листом
            var СписокСерий = iСписокСерий.Skip(1).ToList();

            //Если загруженно меньше 2х серий, нет смысла что-то сравнивать, 
            if (СписокСерий.Count < 2)
                return;

            //Будем считать что первая загруженная серия основная, остальные побочные(донорские)
            var ГлавнаяСерия = СписокСерий.First();

            var ТочкиГлавнойСерии = ГлавнаяСерия.iТочкиСерии;

            //Вторая побочная
            var ПобочнаяСерия = СписокСерий[1];

            var ТочкиПобочнойСерии = ПобочнаяСерия.iТочкиСерии;

            //Есть ли что заменять
            if (ТочкиГлавнойСерии.First().Date > ТочкиПобочнойСерии.Last().Date || ТочкиГлавнойСерии.Last().Date < ТочкиПобочнойСерии.First().Date)
            {
                MessageBox.Show("Невозможно заменить пустые бары, т.к. серия расходяться по времени");
                return;
            }

            var ИндексГлавной = 0;

            var ИндексПобочной = 0;

            //Нахожу первое сходство серий по дате
            for (int j = 0, k = 0; j < ТочкиГлавнойСерии.Count & k < ТочкиПобочнойСерии.Count;)
            {
                var ГлавнаяТочка = (StockPt)ТочкиГлавнойСерии[j];

                var ПобочнаяТочка = (StockPt)ТочкиПобочнойСерии[k];

                if (ГлавнаяТочка.Date < ПобочнаяТочка.Date)
                {
                    j++;
                    continue;
                }

                if (ПобочнаяТочка.Date < ГлавнаяТочка.Date)
                {
                    k++;
                    continue;
                }

                ИндексГлавной = j;

                ИндексПобочной = k;

                break;
            }

            var НовыеБарыИзПобочной = new CustomStockPointList();

            int КатыйJтого = 0;

            //Копирую начало, если есть что копировать
            if (ИндексПобочной > 0)
            {
                for (int k = ИндексПобочной - 1; k >= 0; k--)
                {
                    var ПобочнаяТочка = (StockPt)ТочкиПобочнойСерии[k];

                    //Добовляем точку во временный лист, копируя дату, объём, спред и скорректированные параметры(высота бара)
                    НовыеБарыИзПобочной.Add(new StockPt(ПобочнаяТочка.Date, 
                        ПобочнаяТочка.High + ГлавнаяСерия.iСдвигВысота - ПобочнаяСерия.iСдвигВысота, 
                        ПобочнаяТочка.Low + ГлавнаяСерия.iСдвигВысота - ПобочнаяСерия.iСдвигВысота, 
                        ПобочнаяТочка.Open + ГлавнаяСерия.iСдвигВысота - ПобочнаяСерия.iСдвигВысота,
                        ПобочнаяТочка.Close + ГлавнаяСерия.iСдвигВысота - ПобочнаяСерия.iСдвигВысота,
                        ПобочнаяТочка.Vol, (string)ПобочнаяТочка.Tag));
                }
            }

            //Копирую центр от первого сходства
            for (int j = ИндексГлавной, k = ИндексПобочной; j < ТочкиГлавнойСерии.Count && k < ТочкиПобочнойСерии.Count;)
            {
                var ГлавнаяТочка = (StockPt)ТочкиГлавнойСерии[j];

                var ПобочнаяТочка = (StockPt)ТочкиПобочнойСерии[k];

                //Если отстаём
                if (ГлавнаяТочка.Date < ПобочнаяТочка.Date)
                {
                    j++;
                    continue;
                }

                if (ПобочнаяТочка.Date < ГлавнаяТочка.Date)
                {
                    //Добовляем точку во временный лист, копируя дату, объём, спред и скорректированные параметры(высота бара)
                    НовыеБарыИзПобочной.Add(new StockPt(ПобочнаяТочка.Date,
                        ПобочнаяТочка.High + ГлавнаяСерия.iСдвигВысота - ПобочнаяСерия.iСдвигВысота,
                        ПобочнаяТочка.Low + ГлавнаяСерия.iСдвигВысота - ПобочнаяСерия.iСдвигВысота,
                        ПобочнаяТочка.Open + ГлавнаяСерия.iСдвигВысота - ПобочнаяСерия.iСдвигВысота,
                        ПобочнаяТочка.Close + ГлавнаяСерия.iСдвигВысота - ПобочнаяСерия.iСдвигВысота,
                        ПобочнаяТочка.Vol, (string)ПобочнаяТочка.Tag));
                    k++;
                    continue;
                }
                КатыйJтого = k;
                j++;
                k++;

            }

            //Копирую конец, если есть что копировать
            if (ТочкиПобочнойСерии.Last().Date > ТочкиГлавнойСерии.Last().Date)
            {
                var ПоследБарГлавСерии = ТочкиГлавнойСерии.Last();

                int ИндесПоследБара = ТочкиПобочнойСерии.Count - 1;

                //Ищем индекс последнего бара донорской серии соответствующий послед бару главной серии
                while (ПоследБарГлавСерии.Date < ((StockPt)ТочкиПобочнойСерии[ИндесПоследБара]).Date)
                    ИндесПоследБара--;


                for (int k = ИндесПоследБара + 1; k < ТочкиПобочнойСерии.Count; k++)
                {
                    var ПобочнаяТочка = (StockPt)ТочкиПобочнойСерии[k];

                    //Добовляем точку во временный лист, копируя дату, объём, спред и скорректированные параметры(высота бара)
                    НовыеБарыИзПобочной.Add(new StockPt(ПобочнаяТочка.Date,
                        ПобочнаяТочка.High + ГлавнаяСерия.iСдвигВысота - ПобочнаяСерия.iСдвигВысота,
                        ПобочнаяТочка.Low + ГлавнаяСерия.iСдвигВысота - ПобочнаяСерия.iСдвигВысота,
                        ПобочнаяТочка.Open + ГлавнаяСерия.iСдвигВысота - ПобочнаяСерия.iСдвигВысота,
                        ПобочнаяТочка.Close + ГлавнаяСерия.iСдвигВысота - ПобочнаяСерия.iСдвигВысота,
                        ПобочнаяТочка.Vol, (string)ПобочнаяТочка.Tag));
                }
            }


            MessageBox.Show($"Заменено {НовыеБарыИзПобочной.Count} баров");

            НовыеБарыИзПобочной.Sort((point1, point2) =>
            {
                return point1.Date.CompareTo(point2.Date);
            });

            //Добавляем новые бары в главную серию
            iСписокСерий[1].iТочкиСерии.AddRange(НовыеБарыИзПобочной);

            //Сортируем для корректного отображения + для корректного сохранения
            iСписокСерий[1].iТочкиСерии.Sort((point1, point2) =>
            {
                return point1.Date.CompareTo(point2.Date);
            });


            //TODO убрать этот код позже или переписать
            iСписокСерий.Add(new c_Серия.c_Серия(НовыеБарыИзПобочной, $"СкопированыеБары"));
            ob_График.GraphPane.CurveList.Add(iСписокСерий.Last().iСвечи);
            ob_ЛистБоксСерий.Items.Add("СкопированыеБары", true);

            f_ПерерисоватьГрафик();
            fp_ОбновитьНазванияСерий();
        }

        /// <summary>
        /// Осуществляет поиск гепов в главной серии. Гепом считаем, если значение модуля разности закрытия одного бары и открытия следующего
        /// больше, чем (модуль разности открытия и закрытия первого бара) - (модуль разности открытия и закрытия первого бара, умноженный на Критерий Гепа)
        /// Далее вся серия делиться на ЧислоДелений+1 делений и по ним считаеться средний модуля разности закрытия одного бары и открытия следующего.
        /// В итоге показываем все гепы, у которых модуля разности закрытия одного бары и открытия следующего больше, чем средний на этом участке умноженный на Множитель Среднего
        /// </summary>
        public void f_ПоискГеповВГлавнойСерии()
        {
            if (iСписокСерий.Count < 3)
                return;

            using (Окна.c_ОкноПоискаГепов.c_ОкноПоискаГепов Окно = new Окна.c_ОкноПоискаГепов.c_ОкноПоискаГепов(
                iПоискГепов_ИгноритьЭталон,
                iПоискГепов_КритерийГепа,
                iПоискГепов_МножСреднего,
                iПоискГепов_ЧислоДнейВДелении,
                iПоискГепов_КритерийСжожестиГеповЭталона))
            {
                Окно.ShowDialog();
                if (Окно.DialogResult == DialogResult.OK)
                {
                    iПоискГепов_ИгноритьЭталон = Окно.iИгноритьЭталон;
                    iПоискГепов_КритерийГепа = Окно.iКритерийГепа;
                    iПоискГепов_МножСреднего = Окно.iМножСреднего;
                    iПоискГепов_ЧислоДнейВДелении = Окно.iЧислоДнейВДелении;
                    if (iПоискГепов_ИгноритьЭталон)
                        iПоискГепов_КритерийСжожестиГеповЭталона = Окно.iКритерийСжожестиГеповЭталона;
                }
                else if (Окно.DialogResult == DialogResult.Cancel)
                    return;
            }

            //Храним указатели на бары, за которыми геп
            var ЛистГепов = new CustomStockPointList();

            //Велечина разрыва(гепа)
            var ЛистГепов_Высота = new List<double>();

            var БарыГлавной = iСписокСерий[1].iТочкиСерии;

            for (int i = 0; i < БарыГлавной.Count - 1; i++)
            {
                var ТекущийБар = (StockPt)БарыГлавной[i];
                var СледБар = (StockPt)БарыГлавной[i + 1];

                if (Math.Abs(ТекущийБар.Close - СледБар.Open) > ((Math.Abs(ТекущийБар.Open - ТекущийБар.Close)) - ((Math.Abs(ТекущийБар.Open - ТекущийБар.Close) / (double)iПоискГепов_КритерийГепа))))
                {
                    ЛистГепов.Add(ТекущийБар);
                    ЛистГепов_Высота.Add(Math.Abs(ТекущийБар.Close - СледБар.Open));
                }
            }

            if (ЛистГепов.Count < 1)
            {
                MessageBox.Show($"Найдено 0 гепов по критерию");
                return;
            }

            int ЧислоБаровВДелении = (int)iПоискГепов_ЧислоДнейВДелении * 1440;

            List<double> СреднийГеп = new List<double>();

            СреднийГеп.Add(0d);

            int ТекущееЧислоБаровВДелении = 0;
            
            //Считаем средний 
            for (int i = 0; i < ЛистГепов_Высота.Count; i++)
            {
                СреднийГеп[СреднийГеп.Count - 1]  += ЛистГепов_Высота[i];
                ТекущееЧислоБаровВДелении++;
                if (ТекущееЧислоБаровВДелении == ЧислоБаровВДелении)
                {
                    СреднийГеп[СреднийГеп.Count - 1] /= ТекущееЧислоБаровВДелении;
                    СреднийГеп[СреднийГеп.Count - 1] *= (double)iПоискГепов_МножСреднего;
                    СреднийГеп.Add(0d);
                    ТекущееЧислоБаровВДелении = 0;
                }
                
            }

            if (ТекущееЧислоБаровВДелении > 0)
            {
                СреднийГеп[СреднийГеп.Count - 1] /= ТекущееЧислоБаровВДелении;
                СреднийГеп[СреднийГеп.Count - 1] *= (double)iПоискГепов_МножСреднего;
            }

            var ЛистГепов_Фильтрованный = new CustomStockPointList();
            var ЛистГепов_Фильтрованный_Высота = new List<double>();


            //Отсеивам по среднему
            for (int i = 0; i < ЛистГепов.Count; i++)
            {
                if (ЛистГепов_Высота[i] > СреднийГеп[i / ЧислоБаровВДелении])
                {
                    ЛистГепов_Фильтрованный_Высота.Add(ЛистГепов_Высота[i]);
                    ЛистГепов_Фильтрованный.Add(ЛистГепов[i]);
                }    
            }

            var БарыДонорской = iСписокСерий[2].iТочкиСерии;

            var ЛистГепов_ФильтрПлюс = new CustomStockPointList();

            int ИндексДонор = 0;

            if (iПоискГепов_ИгноритьЭталон)
            {
                for (int i = 0; i < ЛистГепов_Фильтрованный.Count && ИндексДонор < БарыДонорской.Count - 1;)
                {
                    var БарГлавн = (StockPt)ЛистГепов_Фильтрованный[i];
                    var БарГлавнДата = ((XDate)БарГлавн.X).DateTime;

                    var БарДонор = (StockPt)БарыДонорской[ИндексДонор];
                    var БарДонорДата = ((XDate)БарДонор.X).DateTime;

                    if (БарДонорДата < БарГлавнДата)
                    {
                        ИндексДонор++;
                        continue;
                    }

                    if (БарДонорДата > БарГлавнДата)
                    {
                        i++;
                        continue;
                    }

                    //var СледБарГлавн = (StockPt)ЛистГепов_Фильтрованный[i + 1];
                    //var СледБарГлавнДата = ((XDate)СледБарГлавн.X).DateTime;

                    var СледБарДонор = (StockPt)БарыДонорской[ИндексДонор + 1];
                    //var СледБарДонорДата = ((XDate)СледБарДонор.X).DateTime;

                    //if (СледБарДонорДата < СледБарГлавнДата)
                    //{
                    //    ИндексДонор++;
                    //    continue;
                    //}

                    //if (СледБарДонорДата > СледБарГлавнДата)
                    //{
                    //    i++;
                    //    continue;
                    //}

                    var ГепДонор = Math.Abs(БарДонор.Close - СледБарДонор.Open);

                    if (ЛистГепов_Фильтрованный_Высота[i] / ГепДонор < (double)iПоискГепов_КритерийСжожестиГеповЭталона)
                    {
                        ЛистГепов_Фильтрованный_Высота.RemoveAt(i);
                        ЛистГепов_Фильтрованный.RemoveAt(i);
                        ИндексДонор++;
                        continue;
                    }

                    ИндексДонор++;
                    i++;
                }

                //ЛистГепов_Фильтрованный = ЛистГепов_ФильтрПлюс;
            }

            MessageBox.Show($"Найдено гепов: {ЛистГепов_Фильтрованный.Count}");

            iИндексОсобогоБара = 0;
            iОсобыеБары = ЛистГепов_Фильтрованный;
        }

        /// <summary>
        /// Ищет все бары имеющие расхождение с эталоном
        /// </summary>
        public void f_РасхождениеБаровСЭталоном()
        {
            if (iСписокСерий.Count < 3)
                return;

            iОсобыеБары.Clear();

            var ТочкиГлавнойСерии = iСписокСерий[1].iТочкиСерии;         

            var ТочкиПобочнойСерии = iСписокСерий[2].iТочкиСерии;

            for (int j = 0, k = 0; j < ТочкиГлавнойСерии.Count & k < ТочкиПобочнойСерии.Count;)
            {
                var ГлавнаяТочка = (StockPt)ТочкиГлавнойСерии[j];

                var ПобочнаяТочка = (StockPt)ТочкиПобочнойСерии[k];

                if (ГлавнаяТочка.Date < ПобочнаяТочка.Date)
                {
                    j++;
                    continue;
                }

                if (ПобочнаяТочка.Date < ГлавнаяТочка.Date)
                {
                    k++;
                    continue;
                }

                var БольшаяЦена = Math.Max(ГлавнаяТочка.Open, ПобочнаяТочка.Open);
                var МеньшаяЦена = Math.Min(ГлавнаяТочка.Open, ПобочнаяТочка.Open);

                
                if (БольшаяЦена / МеньшаяЦена > (double)ob_КритерийОтклонения.Value)
                    iОсобыеБары.Add(ГлавнаяТочка);


                j++;
                k++;
            }

            if (iОсобыеБары.Count > 0)
                iИндексОсобогоБара = 0;
            else
                iИндексОсобогоБара = -1;
            MessageBox.Show($"Найдено {iОсобыеБары.Count} баров");
        }
         
        /// <summary>
        /// Поднимает выделенную серию в списке серий вверх
        /// </summary>
        public void f_Серия_ПоднятьСериюВСписке()
        {
            //если серия не выбрана и выше некуда
            if (ob_ЛистБоксСерий.SelectedIndex < 2)
                return;

            var МеняемаяСерияСтрока = ob_ЛистБоксСерий.Items[ob_ЛистБоксСерий.SelectedIndex];
            ob_ЛистБоксСерий.Items[ob_ЛистБоксСерий.SelectedIndex] = ob_ЛистБоксСерий.Items[ob_ЛистБоксСерий.SelectedIndex - 1];
            ob_ЛистБоксСерий.Items[ob_ЛистБоксСерий.SelectedIndex - 1] = МеняемаяСерияСтрока;

            var МеняемаяСерия = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex];
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex] = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex - 1];
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex - 1] = МеняемаяСерия;

            var МеняемаяСерияОтрисовка = ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex];
            ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex] = ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex - 1];
            ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex - 1] = МеняемаяСерияОтрисовка;

            var ЧекБоксВидимости = ob_ЛистБоксСерий.GetItemChecked(ob_ЛистБоксСерий.SelectedIndex);
            ob_ЛистБоксСерий.SetItemChecked(ob_ЛистБоксСерий.SelectedIndex, ob_ЛистБоксСерий.GetItemChecked(ob_ЛистБоксСерий.SelectedIndex - 1));
            ob_ЛистБоксСерий.SetItemChecked(ob_ЛистБоксСерий.SelectedIndex - 1, ЧекБоксВидимости);

            ob_ЛистБоксСерий.SelectedIndex--;

            fp_ОбновитьНазванияСерий();
        }

        /// <summary>
        /// Опускает выделенную серию в списке серий вниз
        /// </summary>
        public void f_Серия_ОпуститьСериюВСписке()
        {
            //если серия не выбрана
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            //или ниже некуда
            if (ob_ЛистБоксСерий.SelectedIndex == ob_ЛистБоксСерий.Items.Count - 1)
                return;

            var МеняемаяСерияСтрока = ob_ЛистБоксСерий.Items[ob_ЛистБоксСерий.SelectedIndex];
            ob_ЛистБоксСерий.Items[ob_ЛистБоксСерий.SelectedIndex] = ob_ЛистБоксСерий.Items[ob_ЛистБоксСерий.SelectedIndex + 1];
            ob_ЛистБоксСерий.Items[ob_ЛистБоксСерий.SelectedIndex + 1] = МеняемаяСерияСтрока;

            var МеняемаяСерия = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex];
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex] = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex + 1];
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex + 1] = МеняемаяСерия;

            var МеняемаяСерияОтрисовка = ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex];
            ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex] = ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex + 1];
            ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex + 1] = МеняемаяСерияОтрисовка;

            var ЧекБоксВидимости = ob_ЛистБоксСерий.GetItemChecked(ob_ЛистБоксСерий.SelectedIndex);
            ob_ЛистБоксСерий.SetItemChecked(ob_ЛистБоксСерий.SelectedIndex, ob_ЛистБоксСерий.GetItemChecked(ob_ЛистБоксСерий.SelectedIndex + 1));
            ob_ЛистБоксСерий.SetItemChecked(ob_ЛистБоксСерий.SelectedIndex + 1, ЧекБоксВидимости);

            ob_ЛистБоксСерий.SelectedIndex++;

            fp_ОбновитьНазванияСерий();
        }

        /// <summary>
        /// Проверяет котировки выбранной серии на сдравый смысл
        /// </summary>
        public void f_Серия_ПроверитьКотировкиСерии()
        {
            //если серия не выбрана
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            var БарыСерии = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iТочкиСерии;

            var АномольныеБары = new CustomStockPointList();

            for (int i = 0; i < БарыСерии.Count; i++)
            {
                var Бар = (StockPt)БарыСерии[i];

                if (Бар.Open > Бар.High)
                {
                    АномольныеБары.Add(Бар);
                    continue;
                }
                if (Бар.Close < Бар.Low)
                {
                    АномольныеБары.Add(Бар);
                    continue;
                }
            }

            MessageBox.Show($"Найдено {АномольныеБары.Count} баров с аномальными котировками");

            if (АномольныеБары.Count == 0)
                return;

            
            iОсобыеБары = АномольныеБары;
            iИндексОсобогоБара = 0;
        }

        /// <summary>
        /// Поиск временных сдвигов
        /// </summary>
        public void f_ВременныеСдвиги_Поиск()
        {
            if (iСписокСерий.Count < 3)
                return;

            if (!f_ПроверкаНаДвойныеБары())
                return;

            using (Окна.c_ОкноПоискаВременныхСдвигов.c_ОкноПоисковВременныхСдвигов Окно = new Окна.c_ОкноПоискаВременныхСдвигов.c_ОкноПоисковВременныхСдвигов(iПоискВременныхСдвигов_ЧислоБаров, iПоискВременныхСдвигов_МножительСреднегоДляВысоты))
            {
                Окно.ShowDialog();
                if (Окно.DialogResult == DialogResult.OK)
                {
                    iПоискВременныхСдвигов_ЧислоБаров = Окно.iЧислоБаров;
                    iПоискВременныхСдвигов_МножительСреднегоДляВысоты = Окно.iМножительСреднегоДляВысоты;
                }
                else if (Окно.DialogResult == DialogResult.Cancel)
                    return;
            }


            //TODO Проверитить весь алгоритм
            if (iСегменты == null)
                iСегменты = new c_СписокСекторов.c_СписокСегментов(iСписокСерий[1], iСписокСерий[2]);
            if (iСегменты_ВременнойСдвиг == null)
                iСегменты_ВременнойСдвиг = new c_СписокСекторов.c_СписокСегментов(iСписокСерий[1], iСписокСерий[2]);
            

            iСегменты.Clear();
            iСегменты_ВременнойСдвиг.Clear();

            c_Сегмент.c_Сегмент Сегмент = new c_Сегмент.c_Сегмент();

            iСегменты.Add(Сегмент);

            var ИндексКонцаСерииГлавн = 0;
            var ИндексКонцаСерииДонор = 0;

            var БарыГлавн = iСписокСерий[1].iТочкиСерии;
            var БарыДонор = iСписокСерий[2].iТочкиСерии;

            var ВертикальныйСдвигГлавн = iСписокСерий[1].iСдвигВысота;
            var ВертикальныйСдвигДонор = iСписокСерий[2].iСдвигВысота;

            int БаровВОднойЧасти = (int)iПоискВременныхСдвигов_ЧислоБаров;

            //Нахожу первое сходство серий по дате
            #region Первое сходство серий по дате

            for (int j = БарыГлавн.Count - 1, k = БарыДонор.Count - 1; j >= 0 && k >= 0;)
            {
                var БарГлавн = (StockPt)БарыГлавн[j];
                var БарДонор = (StockPt)БарыДонор[k];

                var БарГлавнData = ((XDate)БарГлавн.Date).DateTime;
                var БарДонорData = ((XDate)БарДонор.Date).DateTime;

                if (БарГлавнData > БарДонорData)
                {
                    j--;
                    continue;
                }

                if (БарДонорData > БарГлавнData)
                {
                    k--;
                    continue;
                }

                ИндексКонцаСерииГлавн = j;
                ИндексКонцаСерииДонор = k;

                break;
            }

            #endregion

            //TODO добавить проверку на границы массивов 2д фором или 2д методом

            var ПредБарГлавн = (StockPt)БарыГлавн[ИндексКонцаСерииГлавн];
            var ПредБарДонор = (StockPt)БарыДонор[ИндексКонцаСерииДонор];

            var БарыСегмента = Сегмент.iБарыСегмента;

            Сегмент.iДельтаЦеныОткрытияСегмента = 0d;
            Сегмент.iСредняяВысотаБаровСегмента = 0d;

            int СчётчикЧасти = 1;

            for (int j = ИндексКонцаСерииГлавн-1, k = ИндексКонцаСерииДонор-1; j >= 0 && k >= 0;)
            {
                var БарГлавн = (StockPt)БарыГлавн[j];
                var БарДонор = (StockPt)БарыДонор[k];

                var БарГлавнData = ((XDate)БарГлавн.Date).DateTime;
                var БарДонорData = ((XDate)БарДонор.Date).DateTime;

                if (БарГлавнData > БарДонорData)
                {
                    j--;
                    continue;
                }

                if (БарДонорData > БарГлавнData)
                {
                    k--;
                    continue;
                }

                
                БарыСегмента.Add(ПредБарГлавн);

                Сегмент.iДельтаЦеныОткрытияСегмента += Math.Abs((ПредБарГлавн.Open - ВертикальныйСдвигГлавн) - (ПредБарДонор.Open - ВертикальныйСдвигДонор));
                Сегмент.iСредняяВысотаБаровСегмента += Math.Abs(ПредБарГлавн.Open - ПредБарГлавн.Close);

                СчётчикЧасти++;

                if (СчётчикЧасти >= БаровВОднойЧасти)
                {
                    Сегмент.iДельтаЦеныОткрытияСегмента /= СчётчикЧасти;
                    Сегмент.iСредняяВысотаБаровСегмента /= СчётчикЧасти;

                    Сегмент = new c_Сегмент.c_Сегмент();

                    БарыСегмента.Reverse();

                    iСегменты.Add(Сегмент);

                    БарыСегмента = Сегмент.iБарыСегмента;

                    Сегмент.iДельтаЦеныОткрытияСегмента = 0d;
                    Сегмент.iСредняяВысотаБаровСегмента = 0d;

                    СчётчикЧасти = 1;
                }
                    

                ПредБарГлавн = БарГлавн;
                ПредБарДонор = БарДонор;

                j--;
                k--;
            }
            Сегмент.iДельтаЦеныОткрытияСегмента /= СчётчикЧасти;
            Сегмент.iСредняяВысотаБаровСегмента /= СчётчикЧасти;

            БарыСегмента.Add(ПредБарГлавн);


            for (int i = 0; i < iСегменты.Count; i++)
            {
                //Проверка на филтр
                if (iСегменты[i].iДельтаЦеныОткрытияСегмента > ((double)iПоискВременныхСдвигов_МножительСреднегоДляВысоты * iСегменты[i].iСредняяВысотаБаровСегмента))
                    iСегменты_ВременнойСдвиг.Add(iСегменты[i]);                
            }

            MessageBox.Show($"Секторв со временным сдвигом: {iСегменты_ВременнойСдвиг.Count}");


            if (iСегменты_ВременнойСдвиг.Count == 0)
            {
                iИндексТекущегоСегмента = -1;
                ob_Debug_label3.Text = iИндексТекущегоСегмента.ToString();
                return;
            }
            
            iИндексТекущегоСегмента = 0;
            ob_Debug_label3.Text = iИндексТекущегоСегмента.ToString();
        }

        /// <summary>
        /// Показать предыдущий сегмент
        /// </summary>
        public void f_ВременныеСдвиги_ПредСегмент()
        {
            if (iИндексТекущегоСегмента == -1)
                return;

            if (iИндексТекущегоСегмента != 0)
                iИндексТекущегоСегмента--;

            ob_Debug_label3.Text = iИндексТекущегоСегмента.ToString();

            ob_Debug_label2.Text = iСегменты_ВременнойСдвиг[iИндексТекущегоСегмента].iДельтаЦеныОткрытияСегмента.ToString();
            ob_Debug_label1.Text = iСегменты_ВременнойСдвиг[iИндексТекущегоСегмента].iСредняяВысотаБаровСегмента.ToString();
            fp_ПоказатьСектор(iСегменты_ВременнойСдвиг[iИндексТекущегоСегмента]);
        }

        /// <summary>
        /// Показать следующий сегмент
        /// </summary>
        public void f_ВременныеСдвиги_СледСегмент()
        {
            if (iИндексТекущегоСегмента == -1)
                return;

            if (iИндексТекущегоСегмента != iСегменты_ВременнойСдвиг.Count - 1)
                iИндексТекущегоСегмента++;

            ob_Debug_label3.Text = iИндексТекущегоСегмента.ToString();

            ob_Debug_label2.Text = iСегменты_ВременнойСдвиг[iИндексТекущегоСегмента].iДельтаЦеныОткрытияСегмента.ToString();
            ob_Debug_label1.Text = iСегменты_ВременнойСдвиг[iИндексТекущегоСегмента].iСредняяВысотаБаровСегмента.ToString();
            fp_ПоказатьСектор(iСегменты_ВременнойСдвиг[iИндексТекущегоСегмента]);

        }


        public void f_ВременныеСдвиги_НевелироватьСдвиги()
        {
            if (iСписокСерий.Count < 3)
                return;

            if (!f_ПроверкаНаДвойныеБары())
                return;

            using (Окна.c_ОкноПоискаВременныхСдвигов.c_ОкноПоисковВременныхСдвигов Окно = new Окна.c_ОкноПоискаВременныхСдвигов.c_ОкноПоисковВременныхСдвигов(iПоискВременныхСдвигов_ЧислоБаров, iПоискВременныхСдвигов_МножительСреднегоДляВысоты))
            {
                Окно.ShowDialog();
                if (Окно.DialogResult == DialogResult.OK)
                {
                    iПоискВременныхСдвигов_ЧислоБаров = Окно.iЧислоБаров;
                    iПоискВременныхСдвигов_МножительСреднегоДляВысоты = Окно.iМножительСреднегоДляВысоты;
                }
                else if (Окно.DialogResult == DialogResult.Cancel)
                    return;
            }


            //TODO Проверитить весь алгоритм
            if (iСегменты == null)
                iСегменты = new c_СписокСекторов.c_СписокСегментов(iСписокСерий[1], iСписокСерий[2]);
            if (iСегменты_ВременнойСдвиг == null)
                iСегменты_ВременнойСдвиг = new c_СписокСекторов.c_СписокСегментов(iСписокСерий[1], iСписокСерий[2]);


            iСегменты.Clear();
            iСегменты_ВременнойСдвиг.Clear();

            c_Сегмент.c_Сегмент Сегмент = new c_Сегмент.c_Сегмент();

            iСегменты.Add(Сегмент);

            var ИндексКонцаСерииГлавн = 0;
            var ИндексКонцаСерииДонор = 0;

            var БарыГлавн = iСписокСерий[1].iТочкиСерии;
            var БарыДонор = iСписокСерий[2].iТочкиСерии;

            var ВертикальныйСдвигГлавн = iСписокСерий[1].iСдвигВысота;
            var ВертикальныйСдвигДонор = iСписокСерий[2].iСдвигВысота;

            int БаровВОднойЧасти = (int)iПоискВременныхСдвигов_ЧислоБаров;

            //Нахожу первое сходство серий по дате
            #region Первое сходство серий по дате

            for (int j = БарыГлавн.Count - 1, k = БарыДонор.Count - 1; j >= 0 && k >= 0;)
            {
                var БарГлавн = (StockPt)БарыГлавн[j];
                var БарДонор = (StockPt)БарыДонор[k];

                var БарГлавнData = ((XDate)БарГлавн.Date).DateTime;
                var БарДонорData = ((XDate)БарДонор.Date).DateTime;

                if (БарГлавнData > БарДонорData)
                {
                    j--;
                    continue;
                }

                if (БарДонорData > БарГлавнData)
                {
                    k--;
                    continue;
                }

                ИндексКонцаСерииГлавн = j;
                ИндексКонцаСерииДонор = k;

                break;
            }

            #endregion

            //TODO добавить проверку на границы массивов перед фором или перед методом

            var ПредБарГлавн = (StockPt)БарыГлавн[ИндексКонцаСерииГлавн];
            var ПредБарДонор = (StockPt)БарыДонор[ИндексКонцаСерииДонор];

            var БарыСегмента = Сегмент.iБарыСегмента;

            Сегмент.iДельтаЦеныОткрытияСегмента = 0d;
            Сегмент.iСредняяВысотаБаровСегмента = 0d;

            int СчётчикЧасти = 1;

            for (int j = ИндексКонцаСерииГлавн - 1, k = ИндексКонцаСерииДонор - 1; j >= 0 && k >= 0;)
            {
                var БарГлавн = (StockPt)БарыГлавн[j];
                var БарДонор = (StockPt)БарыДонор[k];

                var БарГлавнData = ((XDate)БарГлавн.Date).DateTime;
                var БарДонорData = ((XDate)БарДонор.Date).DateTime;

                if (БарГлавнData > БарДонорData)
                {
                    j--;
                    continue;
                }

                if (БарДонорData > БарГлавнData)
                {
                    k--;
                    continue;
                }


                БарыСегмента.Add(ПредБарГлавн);

                Сегмент.iДельтаЦеныОткрытияСегмента += Math.Abs((ПредБарГлавн.Open - ВертикальныйСдвигГлавн) - (ПредБарДонор.Open - ВертикальныйСдвигДонор));
                Сегмент.iСредняяВысотаБаровСегмента += Math.Abs(ПредБарГлавн.Open - ПредБарГлавн.Close);

                СчётчикЧасти++;

                if (СчётчикЧасти >= БаровВОднойЧасти)
                {
                    Сегмент.iДельтаЦеныОткрытияСегмента /= СчётчикЧасти;
                    Сегмент.iСредняяВысотаБаровСегмента /= СчётчикЧасти;

                    Сегмент = new c_Сегмент.c_Сегмент();

                    БарыСегмента.Reverse();

                    iСегменты.Add(Сегмент);

                    БарыСегмента = Сегмент.iБарыСегмента;

                    Сегмент.iДельтаЦеныОткрытияСегмента = 0d;
                    Сегмент.iСредняяВысотаБаровСегмента = 0d;

                    СчётчикЧасти = 1;
                }


                ПредБарГлавн = БарГлавн;
                ПредБарДонор = БарДонор;

                j--;
                k--;
            }
            Сегмент.iДельтаЦеныОткрытияСегмента /= СчётчикЧасти;
            Сегмент.iСредняяВысотаБаровСегмента /= СчётчикЧасти;

            БарыСегмента.Add(ПредБарГлавн);


            for (int i = 0; i < iСегменты.Count; i++)
            {
                //Проверка на филтр
                if (iСегменты[i].iДельтаЦеныОткрытияСегмента > ((double)iПоискВременныхСдвигов_МножительСреднегоДляВысоты * iСегменты[i].iСредняяВысотаБаровСегмента))
                    iСегменты_ВременнойСдвиг.Add(iСегменты[i]);
            }

            MessageBox.Show($"Секторв со временным сдвигом: {iСегменты_ВременнойСдвиг.Count}");

            //Удаление сдвига



            if (iСегменты_ВременнойСдвиг.Count == 0)
            {
                iИндексТекущегоСегмента = -1;
                ob_Debug_label3.Text = iИндексТекущегоСегмента.ToString();
                return;
            }

            iИндексТекущегоСегмента = 0;
            ob_Debug_label3.Text = iИндексТекущегоСегмента.ToString();
        }
        
        /// <summary>
        /// Сдвиг выбранного сегмента на время указаное в параметрах сдвига по времени
        /// </summary>
        public void f_СдвинутьСегмент()
        {
            if (iИндексТекущегоСегмента == -1)
                return;

            
            f_ВременныеСдвиги_СдвинутьСекторПоВремени(
                iСегменты_ВременнойСдвиг[iИндексТекущегоСегмента],
                (double)ob_ГодПарам.Value, (double)ob_МесПарам.Value, (double)ob_ДнПарам.Value,
                (double)ob_ЧасПарам.Value, (double)ob_МинПарам.Value, (double)ob_СекПарам.Value);

        }

        /// <summary>
        /// Сдвиг сегмента на определённое время
        /// </summary>
        /// <param name="_Сегмент"></param>
        /// <param name="_лет"></param>
        /// <param name="_месяц"></param>
        /// <param name="_дней"></param>
        /// <param name="_час"></param>
        /// <param name="_мин"></param>
        /// <param name="_сек"></param>
        public void f_ВременныеСдвиги_СдвинутьСекторПоВремени(
            c_Сегмент.c_Сегмент _Сегмент,
            double _лет = 0d, double _месяц = 0d, double _дней = 0d,
            double _час = 0d, double _мин = 0d, double _сек = 0d)
        {
            //TODO проверить все ли параметры сдвига одинакового знака

            bool СдвигВлево = true;

            var СписокПараметров = new List<double> { _лет, _месяц, _дней, _час, _мин, _сек };

            foreach (var Параметр in СписокПараметров)
            {
                if (Math.Sign(Параметр) > 0)
                {
                    СдвигВлево = false;
                    break;
                }
            }

            var Сегмент = iСегменты_ВременнойСдвиг[iИндексТекущегоСегмента];

            //Записываем сдвиг, чтоб потом правильно сохранить без сдвига
            Сегмент.iСдвигПоДате[0] += _лет;
            Сегмент.iСдвигПоДате[1] += _месяц;
            Сегмент.iСдвигПоДате[2] += _дней;
            Сегмент.iСдвигПоДате[3] += _час;
            Сегмент.iСдвигПоДате[4] += _мин;
            Сегмент.iСдвигПоДате[5] += _сек;

            var БарыСегмента = Сегмент.iБарыСегмента;

            if (СдвигВлево)
            {
                if (ob_Сегменты_ЗаменятьБарамиСдвига.Checked)
                {
                    //var КонецУдаленияДатаXDate = (XDate)БарыСегмента[ИндексБараПервый].X;

                    //КонецУдаленияДатаXDate.AddYears((int)_лет);
                    //КонецУдаленияДатаXDate.AddMonths((int)_месяц);
                    //КонецУдаленияДатаXDate.AddDays(_дней);
                    //КонецУдаленияДатаXDate.AddHours(_час);
                    //КонецУдаленияДатаXDate.AddMinutes(_мин);
                    //КонецУдаленияДатаXDate.AddSeconds(_сек);

                    //var КонецУдаленияДата = КонецУдаленияДатаXDate.DateTime;

                    //var Бар = (StockPt)БарыСегмента[ИндексБараПервый - 1];

                    //for (int i = ИндексБараПервый-1; ((XDate)Бар.X).DateTime >= КонецУдаленияДата;)
                    //{
                    //    БарыСегмента.Remove(Бар);
                    //    i--;
                    //    Бар = (StockPt)БарыСегмента[i];
                    //}



                    for (int i = 0; i < БарыСегмента.Count; i++)
                    {
                        var Дата = (XDate)БарыСегмента[i].X;

                        Дата.AddYears(_лет);
                        Дата.AddMonths(_месяц);
                        Дата.AddDays(_дней);
                        Дата.AddHours(_час);
                        Дата.AddMinutes(_мин);
                        Дата.AddSeconds(_сек);

                        //X хранит значение даты
                        БарыСегмента[i].X = Дата;
                    }
                }
                else
                {
                    //Удаляем все бары с Бары[ИндексБараПоследВСегменте] до Бары[ИндексБараПоследВСегменте]+СдвигПо времени
                    //var СдвигВБарах = _мин + _час*60 + _дней*24*60 + _месяц*30*24*60


                    //var ДатаСоСдвигом = (XDate)ТочкиСерии[ИндексБараПоследВСегменте].X;

                    //ДатаСоСдвигом.AddYears(_лет);
                    //ДатаСоСдвигом.AddMonths(_месяц);
                    //ДатаСоСдвигом.AddDays(_дней);
                    //ДатаСоСдвигом.AddHours(_час);
                    //ДатаСоСдвигом.AddMinutes(_мин);
                    //ДатаСоСдвигом.AddSeconds(_сек);

                    ////var Бар = (StockPt)ТочкиСерии[ИндексБараПоследВСегменте + 1];

                    //XDate ДатаДоКоторойУдалять = 0d;

                    ////for (int i = ИндексБараПоследВСегменте + 1; Бар.X <= ДатаСоСдвигом;)
                    ////{
                    ////    //ДатаДоКоторойУдалять
                    ////    Бар = (StockPt)ТочкиСерии[i];
                    ////}



                    //var КонецУдаленияДатаXDate = (XDate)БарыСегмента[ИндексБараПервый].X;

                    //КонецУдаленияДатаXDate.AddYears(-(int)_лет);
                    //КонецУдаленияДатаXDate.AddMonths(-(int)_месяц);
                    //КонецУдаленияДатаXDate.AddDays(-_дней);
                    //КонецУдаленияДатаXDate.AddHours(-_час);
                    //КонецУдаленияДатаXDate.AddMinutes(-_мин);
                    //КонецУдаленияДатаXDate.AddSeconds(-_сек);

                    //var КонецУдаленияДата = КонецУдаленияДатаXDate.DateTime;

                    //var Бар = (StockPt)БарыСегмента[ИндексБараПервый];
                    //int Индекс = ИндексБараПервый;
                    //while (((XDate)Бар.X).DateTime <= КонецУдаленияДата)
                    //{
                    //    БарыСегмента.Remove(Бар);
                    //    Бар = (StockPt)БарыСегмента[Индекс];
                    //}




                    for (int i = 0; i < БарыСегмента.Count; i++)
                    {
                        var Дата = (XDate)БарыСегмента[i].X;

                        Дата.AddYears(_лет);
                        Дата.AddMonths(_месяц);
                        Дата.AddDays(_дней);
                        Дата.AddHours(_час);
                        Дата.AddMinutes(_мин);
                        Дата.AddSeconds(_сек);

                        //X хранит значение даты
                        БарыСегмента[i].X = Дата;
                    }
                }
                //for (int i = ИндексБараПослед; i >= ИндексБараПервый; i--)
                //{
                //    var Дата = (XDate)ТочкиСерии[i].X;

                //    Дата.AddYears(_лет);
                //    Дата.AddMonths(_месяц);
                //    Дата.AddDays(_дней);
                //    Дата.AddHours(_час);
                //    Дата.AddMinutes(_мин);
                //    Дата.AddSeconds(_сек);

                //    //X хранит значение даты
                //    ТочкиСерии[i].X = Дата;
                //}
            }
            else
            {
                //Проверяем если ли и сколько баров менять если мы будем двигать вправо



                //ИндексБараПервый;
                //int ИндексБараПослед = ТочкиСерии.IndexOf(_БарПослед);


                if (ob_Сегменты_ЗаменятьБарамиСдвига.Checked)
                {
                    //Удаляем все бары с Бары[ИндексБараПоследВСегменте] до Бары[ИндексБараПоследВСегменте]+СдвигПо времени
                    //var СдвигВБарах = _мин + _час*60 + _дней*24*60 + _месяц*30*24*60

                    //var КонецУдаленияДатаXDate = (XDate)БарыСегмента[ИндексБараПослед].X;

                    //КонецУдаленияДатаXDate.AddYears((int)_лет);
                    //КонецУдаленияДатаXDate.AddMonths((int)_месяц);
                    //КонецУдаленияДатаXDate.AddDays(_дней);
                    //КонецУдаленияДатаXDate.AddHours(_час);
                    //КонецУдаленияДатаXDate.AddMinutes(_мин);
                    //КонецУдаленияДатаXDate.AddSeconds(_сек);

                    //var КонецУдаленияДата = КонецУдаленияДатаXDate.DateTime;

                    //var Бар = (StockPt)БарыСегмента[ИндексБараПослед + 1];

                    //for (int i = ИндексБараПослед + 1; ((XDate)Бар.X).DateTime <= КонецУдаленияДата;)
                    //{
                    //    БарыСегмента.Remove(Бар);
                    //    Бар = (StockPt)БарыСегмента[i];
                    //}    



                    for (int i = БарыСегмента.Count - 1; i >= 0; i--)
                    {
                        var Дата = (XDate)БарыСегмента[i].X;

                        Дата.AddYears(_лет);
                        Дата.AddMonths(_месяц);
                        Дата.AddDays(_дней);
                        Дата.AddHours(_час);
                        Дата.AddMinutes(_мин);
                        Дата.AddSeconds(_сек);

                        //X хранит значение даты
                        БарыСегмента[i].X = Дата;
                    }
                }
                else
                {
                    //Удаляем все бары с Бары[ИндексБараПоследВСегменте] до Бары[ИндексБараПоследВСегменте]+СдвигПо времени
                    //var СдвигВБарах = _мин + _час*60 + _дней*24*60 + _месяц*30*24*60


                    //var ДатаСоСдвигом = (XDate)ТочкиСерии[ИндексБараПоследВСегменте].X;

                    //ДатаСоСдвигом.AddYears(_лет);
                    //ДатаСоСдвигом.AddMonths(_месяц);
                    //ДатаСоСдвигом.AddDays(_дней);
                    //ДатаСоСдвигом.AddHours(_час);
                    //ДатаСоСдвигом.AddMinutes(_мин);
                    //ДатаСоСдвигом.AddSeconds(_сек);

                    ////var Бар = (StockPt)ТочкиСерии[ИндексБараПоследВСегменте + 1];

                    //XDate ДатаДоКоторойУдалять = 0d;

                    ////for (int i = ИндексБараПоследВСегменте + 1; Бар.X <= ДатаСоСдвигом;)
                    ////{
                    ////    //ДатаДоКоторойУдалять
                    ////    Бар = (StockPt)ТочкиСерии[i];
                    ////}



                    //var КонецУдаленияДатаXDate = (XDate)БарыСегмента[ИндексБараПослед + 1].X;

                    //КонецУдаленияДатаXDate.AddYears(-(int)_лет);
                    //КонецУдаленияДатаXDate.AddMonths(-(int)_месяц);
                    //КонецУдаленияДатаXDate.AddDays(-_дней);
                    //КонецУдаленияДатаXDate.AddHours(-_час);
                    //КонецУдаленияДатаXDate.AddMinutes(-_мин);
                    //КонецУдаленияДатаXDate.AddSeconds(-_сек);

                    //var КонецУдаленияДата = КонецУдаленияДатаXDate.DateTime;

                    //var Бар = (StockPt)БарыСегмента[ИндексБараПослед];
                    //int Индекс = ИндексБараПослед;
                    //while (((XDate)Бар.X).DateTime >= КонецУдаленияДата)
                    //{
                    //    БарыСегмента.Remove(Бар);
                    //    Индекс--;
                    //    Бар = (StockPt)БарыСегмента[Индекс];
                    //}




                    //TODO проверка на существование сектора, если постоянно сдвигать в право с удаление точек сектора, то он исчезнет


                    for (int i = 0; i < БарыСегмента.Count; i++)
                    {
                        var Дата = (XDate)БарыСегмента[i].X;

                        Дата.AddYears(_лет);
                        Дата.AddMonths(_месяц);
                        Дата.AddDays(_дней);
                        Дата.AddHours(_час);
                        Дата.AddMinutes(_мин);
                        Дата.AddSeconds(_сек);

                        //X хранит значение даты
                        БарыСегмента[i].X = Дата;
                    }
                }

            }


            f_ПерерисоватьГрафик();
            ob_График.Invalidate();
            //Так как передаём просто бары
        }

        /// <summary>
        /// Удалить двойные бары выбранного сегмента
        /// </summary>
        public void f_УдалитьДвойныеБарыТекущегоСегмента()
        {
            if (iИндексТекущегоСегмента == -1)
                return;

            if (iСегменты_ВременнойСдвиг?.Count == 0)
                return;

            fp_УдалитьДвойныеБарыСегмента(iСегменты_ВременнойСдвиг[iИндексТекущегоСегмента]);
            f_ПерерисоватьГрафик();
        }

        /// <summary>
        /// Поиск двойных баров в главной серии
        /// </summary>
        public void f_НайтиДвойныеБары() 
        {
            if (iСписокСерий.Count < 2)
                return;

            var БарыСерии = iСписокСерий[1].iТочкиСерии;

            var БарПредДата = ((XDate)БарыСерии[0].X).DateTime;

            var ДвойныеБары = new CustomStockPointList();

            for (int i = 1; i < БарыСерии.Count; i++)
            {
                var Бар = (StockPt)БарыСерии[i];

                var БарДата = ((XDate)Бар.Date).DateTime;

                if (БарПредДата >= БарДата)
                {
                    ДвойныеБары.Add(Бар);
                    //MessageBox.Show($"Аномальный бар! {БарДата.ToString()}");
                    continue;
                }
                
                БарПредДата = БарДата;
            }

            MessageBox.Show(
                $"Найдено {ДвойныеБары.Count} \"двойных баров\"\n" +
                $"Используйте След\\Пред до кнопкой \"Найти аномальные бары\", чтоб посмотреть их");

            if (ДвойныеБары.Count == 0)
            {
                iОсобыеБары = null;
                iИндексОсобогоБара = -1;
                return;
            }

            iОсобыеБары = ДвойныеБары;
            iИндексОсобогоБара = 0;
        }

        /// <summary>
        /// Окно, вызываемое если найдены двойные бары
        /// </summary>
        /// <returns></returns>
        public bool f_ПроверкаНаДвойныеБары()
        {
            if (fp_ЕстьЛиДвойныеБарыВCерии(iСписокСерий[1]))
            {
                Окна.c_ОкноДвойныхБаров.c_ОкноДвойныхБаров Окно = new Окна.c_ОкноДвойныхБаров.c_ОкноДвойныхБаров();

                DialogResult dialogResult = Окно.ShowDialog();

                if (dialogResult == DialogResult.OK)
                {
                    switch (Окно.iВыбраннаяОпция)
                    {
                        case Окна.c_ОкноДвойныхБаров.ВыбраннаяОпция.ЗаменитьБарамиСдвига:
                            fp_УдалитьДвойныеБарыСерии(iСписокСерий[1]);
                            break;
                        case Окна.c_ОкноДвойныхБаров.ВыбраннаяОпция.ЗаменитьБарамиСерии:
                            fp_УдалитьДвойныеБарыСерии(iСписокСерий[1]);
                            break;
                        case Окна.c_ОкноДвойныхБаров.ВыбраннаяОпция.ПродожитьБезЗамены:
                            
                            break;
                        default:
                            break;
                    }
                }
                else if (dialogResult == DialogResult.Cancel)
                {
                    return false;
                }
            }

            return true;
        }

        /// <summary>
        /// Удаляет все двойные бары во всех сегментах
        /// </summary>
        public void f_УдалитьДвойныеБарыВсехСегментов()
        {
            foreach (var Сегмент in iСегменты_ВременнойСдвиг)
            {
                fp_УдалитьДвойныеБарыСегмента(Сегмент);
            }
            f_ПерерисоватьГрафик();
        }

        /// <summary>
        /// Выбрать текущий бар началом фрагмента
        /// </summary>
        public void f_ФрагментБаров_ВыбратьНачалом()
        {
            if (iВыбранныйБар == null)
            {
                MessageBox.Show($"Выберете бар начала двойным нажатием на графике");
                return;
            }

            iБарНачалаФрагмента = iВыбранныйБар;
            MessageBox.Show($"Фрагмент начинаеться {((XDate)iВыбранныйБар.Date).DateTime.ToString("dd.MM.yyyy HH:mm")}");
        }

        /// <summary>
        /// Выбрать текущий бар концом фрагмента
        /// </summary>
        public void f_ФрагментБаров_ВыбратьКонцом()
        {
            if (iВыбранныйБар == null)
            {
                MessageBox.Show($"Выберете бар начала двойным нажатием на графике");
                return;
            }

            iБарКонцаФрагмента = iВыбранныйБар;
            MessageBox.Show($"Фрагмент заканчивается {((XDate)iВыбранныйБар.Date).DateTime.ToString("dd.MM.yyyy HH:mm")}");
        }

        /// <summary>
        /// Сдвинуть фрагмент на время указаное в параметрах временного сдвига
        /// </summary>
        public void f_ФрагментБаров_СдвинутьПоВремени()
        {
            if (iСписокСерий.Count < 2)
                return;
            

            if (iБарНачалаФрагмента == null)
                return;

            if (iБарКонцаФрагмента == null)
                return;

            if (iБарНачалаФрагмента.Date >= iБарКонцаФрагмента.Date)
            {
                MessageBox.Show($"Бар начала фрагмента не модет быть позже бара конца");
                return;
            }
            
            //TODO сделать проверку на принадлежность баров к одной серии, если нужно

            var БарыСерии = iСписокСерий[1].iТочкиСерии;

            var ИндексПоследБара = БарыСерии.IndexOf(iБарКонцаФрагмента);

            // сдвиг полной
            for (int i = БарыСерии.IndexOf(iБарНачалаФрагмента); i <= ИндексПоследБара; i++)
            {
                var Точка = (StockPt)БарыСерии[i];
                //важно перевести, чтоб сделать корректный переход
                var Дата = (XDate)Точка.Date;

                Дата.AddYears((double)ob_ГодПарам.Value);
                Дата.AddMonths((double)ob_МесПарам.Value);
                Дата.AddDays((double)ob_ДнПарам.Value);
                Дата.AddHours((double)ob_ЧасПарам.Value);
                Дата.AddMinutes((double)ob_МинПарам.Value);
                Дата.AddSeconds((double)ob_СекПарам.Value);

                //X хранит значение даты
                БарыСерии[i].X = Дата;
            }

            ob_График.GraphPane.AxisChange();
            ob_График.Invalidate();
        }

        /// <summary>
        /// Сдвинуть фрагмент по высоте
        /// </summary>
        public void f_ФрагментБаров_СдвинутьПоВысоте()
        {
            if (iСписокСерий.Count < 2)
                return;


            if (iБарНачалаФрагмента == null)
                return;

            if (iБарКонцаФрагмента == null)
                return;

            if (iБарНачалаФрагмента.Date >= iБарКонцаФрагмента.Date)
            {
                MessageBox.Show($"Бар начала фрагмента не модет быть позже бара конца");
                return;
            }

            //TODO сделать проверку на принадлежность баров к одной серии, если нужно

            var БарыСерии = iСписокСерий[1].iТочкиСерии;

            var ИндексПоследБара = БарыСерии.IndexOf(iБарКонцаФрагмента);

            // сдвиг полной
            for (int i = БарыСерии.IndexOf(iБарНачалаФрагмента); i <= ИндексПоследБара; i++)
            {
                var Точка = (StockPt)БарыСерии[i];

                Точка.High += (double)ob_ВысотаПарам.Value;
                Точка.Low += (double)ob_ВысотаПарам.Value;
                Точка.Open += (double)ob_ВысотаПарам.Value;
                Точка.Close += (double)ob_ВысотаПарам.Value;




            }

            ob_График.GraphPane.AxisChange();
            ob_График.Invalidate();
        }

        /// <summary>
        /// Назначить первый бар главной серии началом фрагмента
        /// </summary>
        public void f_ФрагментБаров_НачалоНаНачалоСерии()
        {
            if (iСписокСерий.Count < 2)
                return;


            iБарНачалаФрагмента = (StockPt)iСписокСерий[1].iТочкиСерии[0];
            MessageBox.Show($"Фрагмент начинаеться {((XDate)iБарНачалаФрагмента.Date).DateTime.ToString("dd.MM.yyyy HH:mm")}");
        }

        /// <summary>
        /// Назначить последний бар главной серии концом фрагмента
        /// </summary>
        public void f_ФрагментБаров_КонецНаКонецСерии()
        {
            if (iСписокСерий.Count < 2)
                return;


            iБарКонцаФрагмента = (StockPt)iСписокСерий[1].iТочкиСерии[iСписокСерий[1].iТочкиСерии.Count - 1];
            MessageBox.Show($"Фрагмент начинаеться {((XDate)iБарКонцаФрагмента.Date).DateTime.ToString("dd.MM.yyyy HH:mm")}");
        }

        /// <summary>
        /// Показать первый бар фрагмента
        /// </summary>
        public void f_ФрагментБаров_ПоказатьНачало()
        {
            if (iБарНачалаФрагмента == null)
                return;

            fp_ПоказатьБар(iБарНачалаФрагмента, 16);
        }

        /// <summary>
        /// Показать последий бар фрагмента
        /// </summary>
        public void f_ФрагментБаров_ПоказатьКонец()
        {
            if (iБарКонцаФрагмента == null)
                return;

            fp_ПоказатьБар(iБарКонцаФрагмента, 16);
        }

        



        #region Палитра

        /// <summary>
        /// Вызывает окно выбора палитры для выбора цвета заливки фона графка
        /// </summary>
        public void f_Палитра_ЦветФонаГрафика()
        {
            if (ob_ЦветПалитра.ShowDialog() == DialogResult.OK)
                ob_График.GraphPane.Chart.Fill = new Fill(ob_ЦветПалитра.Color);

            ob_График.Invalidate();
        }

        /// <summary>
        /// Вызывает окно выбора палитры для выбора цвета окантовки графка
        /// </summary>
        public void f_Палитра_ЦветОкантовкиГрафика()
        {
            if (ob_ЦветПалитра.ShowDialog() == DialogResult.OK)
                ob_График.GraphPane.Fill = new Fill(ob_ЦветПалитра.Color);

            ob_График.Invalidate();
        }

        /// <summary>
        /// Вызывает окно выбора палитры для выбора цвета заливки повышения цены свеч
        /// </summary>
        public void f_Палитра_ЦветПовышенияСвечСерии()
        {
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            if (ob_ЦветПалитра.ShowDialog() == DialogResult.OK)
                iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСвечи.Stick.RisingFill.Color = ob_ЦветПалитра.Color;

            ob_График.Invalidate();
        }

        /// <summary>
        /// Вызывает окно выбора палитры для выбора цвета заливки понижения цены свеч
        /// </summary>
        public void f_Палитра_ЦветПониженияСвечСерии()
        {
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            if (ob_ЦветПалитра.ShowDialog() == DialogResult.OK)
                iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСвечи.Stick.FallingFill.Color = ob_ЦветПалитра.Color;

            ob_График.Invalidate();
        }

        /// <summary>
        /// Вызывает окно выбора палитры для выбора цвета оконтовки свеч/баров
        /// </summary>
        public void f_Палитра_ЦветОкантовкиСвечБаровСерии()
        {
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            if (ob_ЦветПалитра.ShowDialog() == DialogResult.OK)
            {
                iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСвечи.Stick.Color = ob_ЦветПалитра.Color;
                iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iБары.Bar.Color = ob_ЦветПалитра.Color;
            }


            ob_График.Invalidate();
        }

        #endregion

        /// <summary>
        /// Перемещает экран графика к передануму в метод бару
        /// </summary>
        /// <param name="_Бар">Бар, который надо показать</param>
        private void fp_ПоказатьАномальныйБар(StockPt _Бар, int _ОтступМинутБока = 8)
        {
            var ОтступВлево = (XDate)_Бар.Date;
            ОтступВлево.AddMinutes(-_ОтступМинутБока);

            var ОтступВправо = (XDate)_Бар.Date;
            ОтступВправо.AddMinutes(_ОтступМинутБока);

            
            ob_График.GraphPane.XAxis.Scale.Min = ОтступВлево;
            ob_График.GraphPane.XAxis.Scale.Max = ОтступВправо;   

            iВыбранныйБар = (StockPt)iОсобыеБары[iИндексОсобогоБара];

            ob_ЦенаОтрытияБара.Value = (decimal)iВыбранныйБар.Open;
            ob_ЦенаМаксБара.Value = (decimal)iВыбранныйБар.High;
            ob_ЦенаМинБара.Value = (decimal)iВыбранныйБар.Low;
            ob_ЦенаЗакрытияБара.Value = (decimal)iВыбранныйБар.Close;
            ob_ОбъёмБара.Value = (decimal)iВыбранныйБар.Vol;



            //Перемещаем визуальный указатель на этот бар
            iУказательНаГрафике.Points[0].X = iВыбранныйБар.Date;
            iУказательНаГрафике.Points[0].Y = iВыбранныйБар.High;

            //Переделать маштабирование
            f_ПерерисоватьГрафик();
        }

        /// <summary>
        /// Перемещает экран к переданому бару с отступов в _ОтступМинут минут 
        /// </summary>
        /// <param name="_Бар"></param>
        /// <param name="_ОтступМинут"></param>
        private void fp_ПоказатьБар(StockPt _Бар, int _ОтступМинут = 8)
        {
            var ОтступВлево = (XDate)_Бар.Date;
            ОтступВлево.AddMinutes(-_ОтступМинут);

            var ОтступВправо = (XDate)_Бар.Date;
            ОтступВправо.AddMinutes(_ОтступМинут);


            ob_График.GraphPane.XAxis.Scale.Min = ОтступВлево;
            ob_График.GraphPane.XAxis.Scale.Max = ОтступВправо;

            iВыбранныйБар = _Бар;

            ob_ЦенаОтрытияБара.Value = (decimal)iВыбранныйБар.Open;
            ob_ЦенаМаксБара.Value = (decimal)iВыбранныйБар.High;
            ob_ЦенаМинБара.Value = (decimal)iВыбранныйБар.Low;
            ob_ЦенаЗакрытияБара.Value = (decimal)iВыбранныйБар.Close;
            ob_ОбъёмБара.Value = (decimal)iВыбранныйБар.Vol;



            //Перемещаем визуальный указатель на этот бар
            iУказательНаГрафике.Points[0].X = iВыбранныйБар.Date;
            iУказательНаГрафике.Points[0].Y = iВыбранныйБар.High;

            //Переделать маштабирование
            f_ПерерисоватьГрафик();
        }

        private void fp_ПоказатьСектор(c_Сегмент.c_Сегмент _Сегмент, int _ОтступМинут = 1)
        {
            var БарыСегмента = _Сегмент.iБарыСегмента;
            
            var ОтступВлево = (XDate)БарыСегмента.First().Date;
            ОтступВлево.AddMinutes(-_ОтступМинут);

            var ОтступВправо = (XDate)БарыСегмента.Last().Date;
            ОтступВправо.AddMinutes(_ОтступМинут);

            ob_График.GraphPane.XAxis.Scale.Min = ОтступВлево;
            ob_График.GraphPane.XAxis.Scale.Max = ОтступВправо;

            //Переделать маштабирование
            f_ПерерисоватьГрафик();
        }

        private void fp_УдалитьДвойныеБарыСегмента(c_Сегмент.c_Сегмент _Сегмент)
        {
            if (!_Сегмент.ЕстьЛиСдвиг)
                return;

            if (iИндексТекущегоСегмента == -1)
                return;

            if (iСегменты_ВременнойСдвиг?.Count == 0)
                return;

            

            var ГлавнаяСерииБары = iСегменты_ВременнойСдвиг.iСерияСектораГлавн.iТочкиСерии;

            var БарыСегмента = _Сегмент.iБарыСегмента;

            var БарСегментаПервый = БарыСегмента.First();
            var БарСегментаПослед = БарыСегмента.Last();

            var ИндексПервогоБара = ГлавнаяСерииБары.IndexOf(БарСегментаПервый);
            var ИндексПоследнБара = ГлавнаяСерииБары.IndexOf(БарСегментаПослед);


            if (ob_Сегменты_ЗаменятьБарамиСдвига.Checked)
            {
                var БарПредДата = ((XDate)ГлавнаяСерииБары[ИндексПоследнБара].X).DateTime;

                if (ИндексПоследнБара + 1 >= ГлавнаяСерииБары.Count)
                    return;

                int i = ИндексПоследнБара + 1;
                var Бар = (StockPt)ГлавнаяСерииБары[i];
                var БарДата = ((XDate)Бар.Date).DateTime;

                var ИндексСегмента = iСегменты_ВременнойСдвиг.IndexOf(_Сегмент);

                CustomStockPointList БарыСегментаСправа = null;

                if (ИндексСегмента - 1 < iСегменты_ВременнойСдвиг.Count)
                    if (iСегменты_ВременнойСдвиг[ИндексСегмента - 1].iБарыСегмента.IndexOf(Бар) != -1)
                        БарыСегментаСправа = iСегменты_ВременнойСдвиг[ИндексСегмента - 1].iБарыСегмента;

                while (БарПредДата >= БарДата)
                {
                    БарыСегментаСправа?.RemoveAt(0);
                    ГлавнаяСерииБары.RemoveAt(i);
                    Бар = (StockPt)ГлавнаяСерииБары[i];
                    БарДата = ((XDate)Бар.Date).DateTime;
                }

                БарПредДата = ((XDate)ГлавнаяСерииБары[ИндексПервогоБара].X).DateTime;

                if (ИндексПервогоБара - 1 < 0)
                    return;

                i = ИндексПервогоБара - 1;
                Бар = (StockPt)ГлавнаяСерииБары[i];
                БарДата = ((XDate)Бар.Date).DateTime;

                CustomStockPointList БарыСегменСлева = null;

                if (ИндексСегмента + 1 >= 0)
                    if (iСегменты_ВременнойСдвиг[ИндексСегмента + 1].iБарыСегмента.IndexOf(Бар) != -1)
                        БарыСегменСлева = iСегменты_ВременнойСдвиг[ИндексСегмента + 1].iБарыСегмента;

                while (БарПредДата <= БарДата)
                {
                    БарыСегменСлева?.RemoveAt(БарыСегменСлева.Count - 1);
                    ГлавнаяСерииБары.RemoveAt(i);
                    i--;
                    Бар = (StockPt)ГлавнаяСерииБары[i];
                    БарДата = ((XDate)Бар.Date).DateTime;
                }


            }
            else
            {
                if (ИндексПоследнБара + 1 >= ГлавнаяСерииБары.Count)
                    return;

                var БарПредДата = ((XDate)ГлавнаяСерииБары[ИндексПоследнБара + 1].X).DateTime;

                int i = ИндексПоследнБара;
                var Бар = (StockPt)ГлавнаяСерииБары[i];
                var БарДата = ((XDate)Бар.Date).DateTime;

                while (БарПредДата <= БарДата)
                {
                    БарыСегмента.RemoveAt(БарыСегмента.Count - 1);
                    ГлавнаяСерииБары.RemoveAt(i);
                    i--;
                    Бар = (StockPt)ГлавнаяСерииБары[i];
                    БарДата = ((XDate)Бар.Date).DateTime;
                }

                if (ИндексПервогоБара - 1 < 0)
                    return;

                БарПредДата = ((XDate)ГлавнаяСерииБары[ИндексПервогоБара - 1].X).DateTime;

                i = ИндексПервогоБара;
                Бар = (StockPt)ГлавнаяСерииБары[i];
                БарДата = ((XDate)Бар.Date).DateTime;

                while (БарПредДата >= БарДата)
                {
                    БарыСегмента.RemoveAt(0);
                    ГлавнаяСерииБары.RemoveAt(i);
                    Бар = (StockPt)ГлавнаяСерииБары[i];
                    БарДата = ((XDate)Бар.Date).DateTime;
                }
            }
            
        }

        private bool fp_ЕстьЛиДвойныеБарыВCерии(c_Серия.c_Серия _Серия)
        {
            var БарыСерии = _Серия.iТочкиСерии;

            for (int i = 0; i < БарыСерии.Count - 1; i++)
            {
                var Бар = (StockPt)БарыСерии[i];
                var БарДата = ((XDate)Бар.X).DateTime;

                var СледБар = (StockPt)БарыСерии[i + 1];
                var СледБарДата = ((XDate)СледБар.Date).DateTime;

                if (БарДата >= СледБарДата)
                    return true;
            }

            return false;
        }

        private void fp_УдалитьДвойныеБарыСерии(c_Серия.c_Серия _Серия)
        {
            var БарыСерии = _Серия.iТочкиСерии;

            var БарПредДата = ((XDate)БарыСерии[0].X).DateTime;

            var ДвойныхБаровУдалено = 0;

            for (int i = 1; i < БарыСерии.Count;)
            {
                var Бар = (StockPt)БарыСерии[i];

                var БарДата = ((XDate)Бар.Date).DateTime;

                if (БарПредДата >= БарДата)
                {
                    БарыСерии.RemoveAt(i);
                    ДвойныхБаровУдалено++;
                    continue;
                }
                i++;
                БарПредДата = БарДата;
            }

            MessageBox.Show($"Удалено {ДвойныхБаровУдалено} \"двойных баров\"\n");

            iОсобыеБары = null;
            iИндексОсобогоБара = -1;

            f_ПерерисоватьГрафик();
        }

        /// <summary>
        /// Метод обновляет количество точек всех серий и названия Главной и Донорской серий
        /// </summary>
        private void fp_ОбновитьНазванияСерий()
        {
            if (iСписокСерий.Count < 2)
                return;

            var ИмяСерии = $"{iСписокСерий[1].iБары.Label.Text.Split('|').First()}|Главная серия({iСписокСерий[1].Count} баров)";

            iСписокСерий[1].iБары.Label.Text = $"{ИмяСерии}";
            iСписокСерий[1].iСвечи.Label.Text = $"{ИмяСерии}";
            ob_ЛистБоксСерий.Items[1] = $"{ИмяСерии}";


            if (iСписокСерий.Count < 3)
                return;

            ИмяСерии = $"{iСписокСерий[2].iБары.Label.Text.Split('|').First()}|Донорская серия({iСписокСерий[2].Count} баров)";

            iСписокСерий[2].iБары.Label.Text = $"{ИмяСерии}";
            iСписокСерий[2].iСвечи.Label.Text = $"{ИмяСерии}";
            ob_ЛистБоксСерий.Items[2] = $"{ИмяСерии}";

            for (int i = 3; i < iСписокСерий.Count; i++)
            {
                ИмяСерии = $"{iСписокСерий[i].iБары.Label.Text.Split('|').First()}|{String.Empty}({iСписокСерий[i].Count} баров)";

                iСписокСерий[i].iБары.Label.Text = $"{ИмяСерии}";
                iСписокСерий[i].iСвечи.Label.Text = $"{ИмяСерии}";
                ob_ЛистБоксСерий.Items[i] = $"{ИмяСерии}";
            }

            ob_График.Invalidate();
        }

        private void fp_ПерейтиКДате(XDate _Дата, int _ОтступМинут = 10)
        {
            var ОсьХ = ob_График.GraphPane.XAxis;

            var СдвигВлево = _Дата;
            СдвигВлево.AddMinutes(-_ОтступМинут);

            var СдвигВправо = _Дата;
            СдвигВправо.AddMinutes(_ОтступМинут);


            ОсьХ.Scale.Min = СдвигВлево;
            ОсьХ.Scale.Max = СдвигВправо;

            f_ПерерисоватьГрафик();
        }

    }
}
