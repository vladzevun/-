using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using ZedGraph;
using АнализГрафиков.c_ЛистТочек;

namespace АнализГрафиков.c_ИсследовательГрафиков
{
    public partial class c_ИсследовательГрафиков
    { 
        /// <summary>
        /// Загружает серию из файла
        /// </summary>
        /// <param name="_путьКфайлу">Путь к файлу</param>
        /// <returns></returns>
        public bool f_ЗагрузитьСериюИзФайла(string _путьКфайлу)
        {
            //проверка на наличие файла
            if (!File.Exists(_путьКфайлу))
                return false;

            var ИмяФайла = $"{_путьКфайлу.Split('\\').Last()}|";

            var ЛистТочек = new CustomStockPointList();

            var НоваяСерия = new c_Серия.c_Серия(ЛистТочек, $"{ИмяФайла}");
            
            iСписокСерий.Add(НоваяСерия);
            ob_График.GraphPane.CurveList.Add(НоваяСерия.iСвечи);

            using (FileStream fs = new FileStream(_путьКфайлу, FileMode.Open))
                f_ЗагрузкаТочекИзПотока(fs, НоваяСерия);

            ob_ЛистБоксСерий.Items.Add($"{ИмяФайла}({НоваяСерия.Count})", CheckState.Checked);

            if (iСписокСерий.IndexOf(НоваяСерия) > 1)
            {
                НоваяСерия.iСвечи.Stick.RisingFill.Color = Color.DarkGreen;
                НоваяСерия.iСвечи.Stick.FallingFill.Color = Color.DarkRed;
            }

            

            ob_График.AxisChange();
            ob_График.RestoreScale(ob_График.GraphPane);
            fp_ОбновитьНазванияСерий();

            return true;
        }

        /// <summary>
        /// Считывает поток построчно и записывает бары в ТекущаяСерия
        /// </summary>
        /// <param name="_поток">Поток с барами</param>
        /// <param name="ТекущаяСерия">Серия, в которую будут считаны бары</param>
        /// <returns></returns>
        public bool f_ЗагрузкаТочекИзПотока(Stream _поток, c_Серия.c_Серия ТекущаяСерия)
        {
            using (StreamReader sr = new StreamReader(_поток))
            {

                var ТочкиСерии = ТекущаяСерия.iТочкиСерии;
                //используем хедеры как проверку правильности формата файла
                if (sr.ReadLine() != $"<DATE>\t<TIME>\t<OPEN>\t<HIGH>\t<LOW>\t<CLOSE>\t<TICKVOL>\t<VOL>\t<SPREAD>")
                {
                    MessageBox.Show("Неверный формат файла");
                    return false;
                }

                //Считываем одну строку вне цикла, чтоб узнать сколько знаков после запятой
                var ПерваяСтрока = sr.ReadLine().Split('\t');
                var ПерваяСтрока_Дата = ПерваяСтрока[0].Split('.');
                var ПерваяСтрока_Вермя = ПерваяСтрока[1].Split(':');
                
                ТочкиСерии.Add(new StockPt(new XDate(int.Parse(ПерваяСтрока_Дата[0]), int.Parse(ПерваяСтрока_Дата[1]), int.Parse(ПерваяСтрока_Дата[2]), int.Parse(ПерваяСтрока_Вермя[0]), int.Parse(ПерваяСтрока_Вермя[1]), int.Parse(ПерваяСтрока_Вермя[2])),
                    double.Parse(ПерваяСтрока[3], CultureInfo.InvariantCulture), //max
                    double.Parse(ПерваяСтрока[4], CultureInfo.InvariantCulture), //min
                    double.Parse(ПерваяСтрока[2], CultureInfo.InvariantCulture), //open
                    double.Parse(ПерваяСтрока[5], CultureInfo.InvariantCulture), //close
                    double.Parse(ПерваяСтрока[6], CultureInfo.InvariantCulture), //vol
                    int.Parse(ПерваяСтрока[8]).ToString()));                     //spread
                                                                                 //У zed grapha есть спец свободно поле Tag, его использую для хранения SPREAD

                //Записываем кол-во точек после запятой в класс серии
                ТекущаяСерия.iЦифрПослеЗапятой = ПерваяСтрока[3].Split('.')[1].Length;

                while (!sr.EndOfStream)
                {
                    var СтрокаДанных = sr.ReadLine().Split('\t');

                    //TODO: избавится от Split - найти нужный конструктор для DateTime (как в функции сохранения если такой есть или написать свой форматер)
                    var Дата = СтрокаДанных[0].Split('.');
                    var Время = СтрокаДанных[1].Split(':');
                    
                    ТочкиСерии.Add(new StockPt(new XDate(int.Parse(Дата[0]), int.Parse(Дата[1]), int.Parse(Дата[2]), int.Parse(Время[0]), int.Parse(Время[1]), int.Parse(Время[2])),
                        double.Parse(СтрокаДанных[3], CultureInfo.InvariantCulture), //max
                        double.Parse(СтрокаДанных[4], CultureInfo.InvariantCulture), //min
                        double.Parse(СтрокаДанных[2], CultureInfo.InvariantCulture), //open
                        double.Parse(СтрокаДанных[5], CultureInfo.InvariantCulture), //close
                        double.Parse(СтрокаДанных[6], CultureInfo.InvariantCulture), //vol
                        int.Parse(СтрокаДанных[8]).ToString()));                     //spread
                    //У zed grapha есть спец свободно поле Tag, его использую для хранения SPREAD
                }
            }
            return true;
        }

        /// <summary>
        /// Сохраняет серию в файл
        /// </summary>
        /// <param name="_путьКФайлу">Путь к файлу</param>
        /// <returns></returns>
        public bool f_СохрСериюВФайл(string _путьКФайлу)
        {
            using (FileStream fs = new FileStream(_путьКФайлу, FileMode.Create))
                return f_СохрСериюВПоток(fs);
        }

        /// <summary>
        /// Сохраняет серию в поток
        /// </summary>
        /// <param name="_поток">Поток в который будут сохранены данные</param>
        /// <returns></returns>
        public bool f_СохрСериюВПоток(Stream _поток)
        {
            //если серия не выбрана
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
            {
                MessageBox.Show("Выберете серию в списке");
                return false;
            }

            var ТочкиСерии = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iТочкиСерии;

            using (StreamWriter sw = new StreamWriter(_поток))
            {
                //записываем хедеры
                sw.WriteLine("<DATE>\t<TIME>\t<OPEN>\t<HIGH>\t<LOW>\t<CLOSE>\t<TICKVOL>\t<VOL>\t<SPREAD>");

                for (int i = 0; i < ТочкиСерии.Count; i++)
                {
                    var Точка = (StockPt)ТочкиСерии[i];

                    var СдвигПоВысоте = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигВысота;

                    var Дата = ((XDate)((StockPt)ТочкиСерии[i]).Date);

                    //Сдвиг даты для записи верных данных 
                    Дата.AddYears(-iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[0]);
                    Дата.AddMonths(-iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[1]);
                    Дата.AddDays(-iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[2]);
                    Дата.AddHours(-iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[3]);
                    Дата.AddMinutes(-iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[4]);
                    Дата.AddSeconds(-iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[5]);

                    //кол-во чисел после запятой
                    string Формат = $"F{iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iЦифрПослеЗапятой}";

                    sw.Write($"{Дата.DateTime.ToString("yyyy.MM.dd\tHH:mm:ss")}\t");
                    sw.WriteLine($"{(Точка.Open - СдвигПоВысоте).ToString(Формат, CultureInfo.InvariantCulture)}\t" +
                        $"{(Точка.High - СдвигПоВысоте).ToString(Формат, CultureInfo.InvariantCulture)}\t" +
                        $"{(Точка.Low - СдвигПоВысоте).ToString(Формат, CultureInfo.InvariantCulture)}\t" +
                        $"{(Точка.Close - СдвигПоВысоте).ToString(Формат, CultureInfo.InvariantCulture)}\t" +
                        $"{Точка.Vol.ToString(CultureInfo.InvariantCulture)}\t" +
                        $"{0}\t" +
                        $"{Точка.Tag}");
                }
            }
            return true;
        }

        /// <summary>
        /// Удаляет выбранную в ListBox'е серию
        /// </summary>
        /// <returns></returns>
        public bool f_УдалитьВыбранСерию()
        {
            //если серия не выбрана
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
            {
                MessageBox.Show("Выберете серию в списке");
                return false;
            }

            //Удаляем все данные связаные с серией, так как добавление их происходит вместе, индекс у них одинаковый
            ob_График.GraphPane.CurveList.RemoveAt(ob_ЛистБоксСерий.SelectedIndex);
            iСписокСерий.RemoveAt(ob_ЛистБоксСерий.SelectedIndex);
            //Важно этот элемет лист бокса удалять последним, так как в нём индкес
            ob_ЛистБоксСерий.Items.RemoveAt(ob_ЛистБоксСерий.SelectedIndex);

            //ob_График1.RestoreScale(ob_График1.GraphPane);
            ob_График.GraphPane.AxisChange();
            fp_ОбновитьНазванияСерий();

            return true;
        }

        /// <summary>
        /// Двигает выбранную в ListBox'е серию на время указанное в параметрах
        /// </summary>
        /// <param name="_лет"></param>
        /// <param name="_месяц"></param>
        /// <param name="_дней"></param>
        /// <param name="_час"></param>
        /// <param name="_мин"></param>
        /// <param name="_сек"></param>
        public void f_СдвинутьСериюГориз(double _лет = 0d, double _месяц = 0d, double _дней = 0d,
                                            double _час = 0d, double _мин = 0d, double _сек = 0d)
        {
            //если серия не выбрана
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            var ВыбраннаяСерия = ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex];

            var ТочкиСерии = (CustomStockPointList)ВыбраннаяСерия.Points;

            //Записываем сдвиг, чтоб потом правильно сохранить без сдвига
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[0] += _лет;
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[1] += _месяц;
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[2] += _дней;
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[3] += _час;
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[4] += _мин;
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигДата[5] += _сек;

            // сдвиг отображаемой версии
            //for (int i = 0; i < ТочкиСерии.Count; i++)
            //{
            //    var Точка = (StockPt)ТочкиСерии[i];
            //    //важно перевести, чтоб сделать корректный переход
            //    var Дата = (XDate)Точка.Date;

            //    //Сдвиг даты на графике
            //    Дата.AddYears(_лет);
            //    Дата.AddMonths(_месяц);
            //    Дата.AddDays(_дней);
            //    Дата.AddHours(_час);
            //    Дата.AddMinutes(_мин);
            //    Дата.AddSeconds(_сек);

            //    //X хранит значение даты
            //    ТочкиСерии[i].X = Дата;
            //}

            ТочкиСерии = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iТочкиСерии;
            // сдвиг полной
            for (int i = 0; i < ТочкиСерии.Count; i++)
            {
                var Точка = (StockPt)ТочкиСерии[i];
                //важно перевести, чтоб сделать корректный переход
                var Дата = (XDate)Точка.Date;

                Дата.AddYears(_лет);
                Дата.AddMonths(_месяц);
                Дата.AddDays(_дней);
                Дата.AddHours(_час);
                Дата.AddMinutes(_мин);
                Дата.AddSeconds(_сек);

                //X хранит значение даты
                ТочкиСерии[i].X = Дата;
            }

            ob_График.GraphPane.AxisChange();
            ob_График.Invalidate();
        }

        /// <summary>
        /// Двигает выбранный график по вертикали
        /// </summary>
        /// <param name="_высота">Значение дожно быть маленьким(к примеру -0.001d)</param>
        public void f_СдвинутьСериюВерт(double _высота)
        {
            //если серия не выбрана
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            //Так как в памяти храниться полная и уменьшенная версия, нужно поменять обе

            var ВыбраннаяСерия = ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex];

            //Сохраняем общий сдвиг по высоте
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСдвигВысота += _высота;

            var ТочкиСерии = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iТочкиСерии;

            // сдвиг полной
            for (int i = 0; i < ТочкиСерии.Count; i++)
            {
                var Точка = (StockPt)ТочкиСерии[i];

                Точка.Open += _высота;
                Точка.High += _высота;
                Точка.Low += _высота;
                Точка.Close += _высота;
            }

            //e_График_ИзменениеМасштаба(null, null, ob_График.GraphPane.ZoomStack.Last());
            ob_График.GraphPane.AxisChange();
            ob_График.Invalidate();
        }

        /// <summary>
        /// Пересовыет график с учётом максимального количества отрисовываемых баров на серию
        /// </summary>
        /// <param name="newZoomState">Стейт зум после изменения, нужен для отлючения сжатия по Х, если мы крутим колёсико</param>
        public void f_ПерерисоватьГрафик(ZoomState newZoomState)
        {
            var График = ob_График.GraphPane;

            //Точки считаю по Оси Х, для удоства ось в перем
            var ОсьХ = ob_График.GraphPane.XAxis.Scale;

            ОсьХ.Format = "dd-MM-yyyy hh:mm";
            ОсьХ.MajorUnit = DateUnit.Day;
            ОсьХ.MajorStep = 3;


            //Рисовать каждый бар за границами со след шагом
            int ШагОтрисовкиЗаВыделением = 200;

            //Через какой промежуток отрисовывать в области выделения
            int ШагОтрисовкиВнутриВыделения = 1;

            //Максимальное кол-во отрисованных точек внутри
            int МаксимумОтрисованТочек = (int)ob_МаксКолвоТочек.Value;


            //Для выравнивания по У
            double? МаксY = null;
            double? МинY = null;

            //Для выравнивания по X
            double? МаксХ = null;
            double? МинХ = null;


            foreach (var ТекущаяСерия in iСписокСерий.Skip(1))
            {
                if (!ob_График.GraphPane.CurveList[iСписокСерий.IndexOf(ТекущаяСерия)].IsVisible)
                    continue;

                var ТочкиСерии = ТекущаяСерия.iТочкиСерии;

                int ИндексПервойТочки = -1;

                if (ТочкиСерии[0].X > ОсьХ.Max)
                    continue;


                for (int i = 0; i < ТочкиСерии.Count; i++)
                    if (ТочкиСерии[i].X > ОсьХ.Min)
                    {
                        ИндексПервойТочки = i;
                        break;
                    }


                if (ИндексПервойТочки == -1)
                    continue;

                int ИндексПоследТочки = -1;

                for (int i = ИндексПервойТочки; i < ТочкиСерии.Count; i++)
                    if (ТочкиСерии[i].X > ОсьХ.Max)
                    {
                        ИндексПоследТочки = i - 1;
                        break;
                    }


                if (ИндексПоследТочки == -1)
                    ИндексПоследТочки = ТочкиСерии.Count - 1;

                //Количество свеч на экране (в выделеном участке)
                int КолвоВыделенныйТочек = ИндексПоследТочки - ИндексПервойТочки;

                //Умножаем на три потому что в бока(лево право) хоть мы их не видим но отрисовыем кол-во равное _количествоСвеч. И того Лево+Середи+Право(х+х+х = 3х)
                if (КолвоВыделенныйТочек * 3 > МаксимумОтрисованТочек)
                    ШагОтрисовкиВнутриВыделения = КолвоВыделенныйТочек / МаксимумОтрисованТочек;
                else
                    ШагОтрисовкиВнутриВыделения = 1;

                if (ШагОтрисовкиВнутриВыделения == 0)
                    ШагОтрисовкиВнутриВыделения = 1;

                var УкороченаяСерия = new CustomStockPointList();


                int НачалоОтрисовки = ИндексПервойТочки - КолвоВыделенныйТочек;

                int КонецОтрисовки = ИндексПоследТочки + КолвоВыделенныйТочек;

                if (КонецОтрисовки > ТочкиСерии.Count)
                    КонецОтрисовки = ТочкиСерии.Count;

                if (НачалоОтрисовки < 0)
                    НачалоОтрисовки = 0;

                //Добавляем точки ДО выделения(до левого промежутка)
                for (int i = 0; i < НачалоОтрисовки; i += ШагОтрисовкиЗаВыделением)
                    УкороченаяСерия.Add(ТочкиСерии[i]);
                //Середина
                for (int i = НачалоОтрисовки; i < КонецОтрисовки; i += ШагОтрисовкиВнутриВыделения)
                    УкороченаяСерия.Add(ТочкиСерии[i]);
                //Добавлем точки ПОСЛЕ выделения
                for (int i = КонецОтрисовки; i < ТочкиСерии.Count; i += ШагОтрисовкиЗаВыделением)
                    УкороченаяСерия.Add(ТочкиСерии[i]);

                ob_График.GraphPane.CurveList[iСписокСерий.IndexOf(ТекущаяСерия)].Points = УкороченаяСерия;


                //Код сжатия по Х

                if (МинХ == null)
                    МинХ = ТочкиСерии[ИндексПервойТочки].X;
                if (МаксХ == null)
                    МаксХ = ТочкиСерии[ИндексПоследТочки].X;

                var t = (XDate)МаксХ;
                var t1 = (XDate)МинХ;

                if (ТочкиСерии[ИндексПервойТочки].X < МинХ)
                    МинХ = ТочкиСерии[ИндексПервойТочки].X;
                if (ТочкиСерии[ИндексПоследТочки].X > МаксХ)
                    МаксХ = ТочкиСерии[ИндексПоследТочки].X;



                //Код сжатия по Y
                if (!ob_ПрижатьПоY.Checked)
                    continue;

                //Находим макс и мин У на выделенном отрезке
                var ТочкиВнутриВыделения = ТочкиСерии.Skip(ИндексПервойТочки).Take(КолвоВыделенныйТочек);

                //Если увеличить на столько, что на экране точек будет 0, _внутриВыделения.Max(p => p.Y); выдаст исключение
                if (ТочкиВнутриВыделения.Count() == 0)
                    continue;

                var МаксYВнутриВыделения = ТочкиВнутриВыделения.Max(p => p.High);
                var МигYВнутриВыделения = ТочкиВнутриВыделения.Min(p => p.Low);

                //нужно для первого прохода
                if (МинY == null)
                    МинY = МигYВнутриВыделения;
                if (МаксY == null)
                    МаксY = МаксYВнутриВыделения;

                if (МигYВнутриВыделения < МинY)
                    МинY = МигYВнутриВыделения;

                if (МаксYВнутриВыделения > МаксY)
                    МаксY = МаксYВнутриВыделения;


            }
            //Стоит ли чек бокс
            if (ob_ПрижатьПоY.Checked)
            {
                if (МаксY != null && МинY != null)
                {
                    var Дельта = Math.Abs((double)(МаксY - МинY));

                    ob_График.GraphPane.YAxis.Scale.Max = (double)МаксY + ((double)Дельта / 30);
                    ob_График.GraphPane.YAxis.Scale.Min = (double)МинY - ((double)Дельта / 30);

                    ob_ВысотаПарам.Value = (decimal)Дельта / 10;
                }
            }
                
            
                

            //Если перерисовка вызвана внутри кода, а не из польз. интерфейса
            if (newZoomState == null)
                newZoomState = ob_График.GraphPane.ZoomStack.Last();

            //Стоит ли чек бокс
            if (ob_ПрижатьПоX.Checked && newZoomState.Type != ZoomState.StateType.WheelZoom)
                if (МаксХ != null && МинХ != null)
                {
                    var Дельта = (double)(МаксХ - МинХ);  //new XDate(0, 0, 0, 0, 1, 0);

                    ob_График.GraphPane.XAxis.Scale.Max = (double)(МаксХ + (Дельта / 50));
                    ob_График.GraphPane.XAxis.Scale.Min = (double)(МинХ - (Дельта / 50));
                }


            ob_График.AxisChange();
            ob_График.Invalidate();
        }

        /// <summary>
        /// Меняет отображение выбранной серии со свечей на бары
        /// </summary>
        public void f_ОтображатьБарами()
        {
            //если серия не выбрана
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iБары.Points = ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex].Points;
            ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex] = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iБары;

            ob_График.AxisChange();
            ob_График.Invalidate();
        }

        /// <summary>
        /// Меняет отображение выбранной серии с баров на свечи
        /// </summary>
        public void f_ОтображатьСвечами()
        {
            //если серия не выбрана
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСвечи.Points = ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex].Points;
            ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex] = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСвечи;

            ob_График.AxisChange();
            ob_График.Invalidate();
        }

        /// <summary>
        /// Выполняет поиск аномальных баров в главной(первой) серии
        /// Для поиска должна быть загруженна донорская серии, т.к. алгоритм поиска задействует обе серии
        /// </summary>
        public void f_ПоискАномальныхБаров()
        {
            //Т.к. в списке серий 1 элемент пустышка и нужен только для правильной синхронизации с ob_ЛистомБаров по индексу,
            //далее будем работать с укорочем листом
            var СписокСерий = iСписокСерий.Skip(1).ToList();

            //Если загруженно меньше 2х серий, нет смысла что-то сравнивать, 
            if (СписокСерий.Count < 2)
                return;

            //Будем считать что первая загруженная серия основная, остальные побочные(донорские)
            var ГлавнаяСерия = СписокСерий.First();

            var ТочкиГлавнойСерии = ГлавнаяСерия.iТочкиСерии;

            iАномальныеТочки.Clear();

            var ПобочнаяСерия = СписокСерий[1];

            var ТочкиПобочнойСерии = ПобочнаяСерия.iТочкиСерии;

            for (int j = 0, k = 0; j < ТочкиГлавнойСерии.Count & k < ТочкиПобочнойСерии.Count;)
            {
                var ГлавнаяТочка = (StockPt)ТочкиГлавнойСерии[j];

                var ПобочнаяТочка = (StockPt)ТочкиПобочнойСерии[k];

                if (ГлавнаяТочка.Date < ПобочнаяТочка.Date)
                {
                    j++;
                    continue;
                }

                if (ПобочнаяТочка.Date < ГлавнаяТочка.Date)
                {
                    k++;
                    continue;
                }

                var ГлавнаяДельта = Math.Abs(ГлавнаяТочка.Open - ГлавнаяТочка.Close);
                var ПобочнаяДельта = Math.Abs(ПобочнаяТочка.Open - ПобочнаяТочка.Close);

                bool ЯвляетсяАномальнаяТочка = (((ПобочнаяДельта / ГлавнаяДельта) > (double)ob_ПараметрДельтаАномальныйБаров.Value) || ((ГлавнаяДельта / ПобочнаяДельта) > (double)ob_ПараметрДельтаАномальныйБаров.Value));

                if (ЯвляетсяАномальнаяТочка)
                {
                    iАномальныеТочки.Add(ГлавнаяТочка);
                }

                j++;
                k++;
            }

            if (iАномальныеТочки.Count > 0)
                iИндексТекущейАномальнойТочки = 0;
            else
                iИндексТекущейАномальнойТочки = -1;
            MessageBox.Show($"Найдено {iАномальныеТочки.Count} баров");
        }

        /// <summary>
        /// Показывает предыдущий бар хранящийся в списке iАномальныеБары
        /// </summary>
        public void f_ПоказатьПредБар()
        {
            if (iИндексТекущейАномальнойТочки == -1)
                return;

            if (iИндексТекущейАномальнойТочки != 0)
                iИндексТекущейАномальнойТочки--;

            fp_ПоказатьБар((StockPt)iАномальныеТочки[iИндексТекущейАномальнойТочки]);
        }

        /// <summary>
        /// /// Показывает следующий бар хранящийся в списке iАномальныеБары
        /// </summary>
        public void f_ПоказатьСледБар()
        {
            if (iИндексТекущейАномальнойТочки == -1)
                return;

            if (iИндексТекущейАномальнойТочки != iАномальныеТочки.Count - 1)
                iИндексТекущейАномальнойТочки++;

            fp_ПоказатьБар((StockPt)iАномальныеТочки[iИндексТекущейАномальнойТочки]);
        }

        /// <summary>
        /// Заменяет выбранный бар из донорской серии в главную
        /// Выбранный это текущий бар в списке iАномальныеБары с индексом iИндексТекущейАномальнойТочки
        /// </summary>
        public void f_ЗаменитьВыбранныйБар()
        {
            if (iИндексТекущейАномальнойТочки == -1)
                return;

            if (iВыбранныйБар == null)
                return;

            //Т.к. в списке серий 1 элемент пустышка и нужен только для правильной синхронизации с ob_ЛистомБаров по индексу,
            //далее будем работать с укорочем листом
            var СписокСерий = iСписокСерий.Skip(1).ToList();


            //TODO: Код можно сильно сократить. Спросить об этом Вадима
            var ГлавнаяТочка = (StockPt)iАномальныеТочки[iИндексТекущейАномальнойТочки];

            var ПобочнаяТочка = СписокСерий[1].iТочкиСерии.First(p => p.Date == ((StockPt)iАномальныеТочки[iИндексТекущейАномальнойТочки]).Date);


            var СерединаГлавной = (ГлавнаяТочка.Open + ГлавнаяТочка.Close) / 2;

            var СерединаПробной = (ПобочнаяТочка.Open + ПобочнаяТочка.Close) / 2;

            var СдвигВверх = СерединаГлавной - СерединаПробной;


            //iАномальныеТочки[iИндексТекущейАномальнойТочки] = iСписокСерий[1].iТочкиСерии.First(p => p.Date == ((StockPt)iАномальныеТочки[iИндексТекущейАномальнойТочки]).Date);
            ((StockPt)iАномальныеТочки[iИндексТекущейАномальнойТочки]).Open = ПобочнаяТочка.Open + СдвигВверх;
            ((StockPt)iАномальныеТочки[iИндексТекущейАномальнойТочки]).High = ПобочнаяТочка.High + СдвигВверх;
            ((StockPt)iАномальныеТочки[iИндексТекущейАномальнойТочки]).Low = ПобочнаяТочка.Low + СдвигВверх;
            ((StockPt)iАномальныеТочки[iИндексТекущейАномальнойТочки]).Close = ПобочнаяТочка.Close + СдвигВверх;
            ((StockPt)iАномальныеТочки[iИндексТекущейАномальнойТочки]).Vol = ПобочнаяТочка.Vol;

            ob_ЦенаОтрытияБара.Value = (decimal)iВыбранныйБар.Open;
            ob_ЦенаМаксБара.Value = (decimal)iВыбранныйБар.High;
            ob_ЦенаМинБара.Value = (decimal)iВыбранныйБар.Low;
            ob_ЦенаЗакрытияБара.Value = (decimal)iВыбранныйБар.Close;
            ob_ОбъёмБара.Value = (decimal)iВыбранныйБар.Vol;

            //e_СледАномальныйБар_Click(null, null);

            ob_График.Invalidate();
        }

        /// <summary>
        /// Удаляет все одинокие бары в выбранной серии
        /// Одиноким считаеться бар, у которого нет соседий в радиусе _отступМинут минут
        /// </summary>
        /// <param name="_отступМинут">Порог минут, после которого мы считаем бар одиноким</param>
        public void f_УдалитьОдинокиеБарыВыбраннойСерии(int _отступМинут)
        {
            if (_отступМинут < 2)
                return;


            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            //Нужно учитывать что 1 минута уже есть, а 1 минута идёт на погрешность сравнения double'ов т.к. даты XDate в точках храняться как double
            _отступМинут -= 2;

            var ВыбраннаяСерия = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex];

            StockPt ТекущаяТочка = (StockPt)ВыбраннаяСерия.iТочкиСерии[0];

            //Столько равна разность двух XDate в 1 минуту
            var Дата = new XDate(1899, 12, 29, 23, 59, 00);

            Дата.AddMinutes(-_отступМинут);

            var ПорогВремени = (double)Дата;

            bool ТекущийОдинокий = true;

            var УдаленоБаров = 0;

            for (int i = 1; i < ВыбраннаяСерия.Count; i++)
            {
                StockPt СледТочка = (StockPt)ВыбраннаяСерия.iТочкиСерии[i];

                if (((ТекущаяТочка.Date - СледТочка.Date) < ПорогВремени))
                {
                    if (ТекущийОдинокий)
                    {
                        УдаленоБаров++;
                        ВыбраннаяСерия.iТочкиСерии.Remove(ТекущаяТочка);
                        i--;
                    }

                    ТекущаяТочка = СледТочка;
                    ТекущийОдинокий = true;
                    continue;
                }
                ТекущаяТочка = СледТочка;
                ТекущийОдинокий = false;
            }

            if (ТекущийОдинокий)
                ВыбраннаяСерия.iТочкиСерии.RemoveAt(ВыбраннаяСерия.Count - 1);

            MessageBox.Show($"Удалено {УдаленоБаров} одиноких баров");

            ob_График.RestoreScale(ob_График.GraphPane);
            fp_ОбновитьНазванияСерий();
        }

        /// <summary>
        /// Копирует из донорской серии в главную отсутствующие бары
        /// Отсутствующие бары, такие бары которые есть в донорской, но отсутствуют в главной по дате
        /// </summary>
        public void f_СкопироватьПустыеБары()
        {
            //Нужно чтоб было заргуженно хотябы 2 серии(главная и побочная)
            if (iСписокСерий.Count < 3)
                return;

            //Т.к. в списке серий 1 элемент пустышка и нужен только для правильной синхронизации с ob_ЛистомБаров по индексу,
            //далее будем работать с укорочем листом
            var СписокСерий = iСписокСерий.Skip(1).ToList();

            //Если загруженно меньше 2х серий, нет смысла что-то сравнивать, 
            if (СписокСерий.Count < 2)
                return;

            //Будем считать что первая загруженная серия основная, остальные побочные(донорские)
            var ГлавнаяСерия = СписокСерий.First();

            var ТочкиГлавнойСерии = ГлавнаяСерия.iТочкиСерии;

            //Вторая побочная
            var ПобочнаяСерия = СписокСерий[1];

            var ТочкиПобочнойСерии = ПобочнаяСерия.iТочкиСерии;

            //Есть ли что заменять
            if (ТочкиГлавнойСерии.First().Date > ТочкиПобочнойСерии.Last().Date || ТочкиГлавнойСерии.Last().Date < ТочкиПобочнойСерии.First().Date)
            {
                MessageBox.Show("Невозможно заменить пустые бары, т.к. серия расходяться по времени");
                return;
            }

            var ИндексГлавной = 0;

            var ИндексПобочной = 0;

            //Нахожу первое сходство серий по дате
            for (int j = 0, k = 0; j < ТочкиГлавнойСерии.Count & k < ТочкиПобочнойСерии.Count;)
            {
                var ГлавнаяТочка = (StockPt)ТочкиГлавнойСерии[j];

                var ПобочнаяТочка = (StockPt)ТочкиПобочнойСерии[k];

                if (ГлавнаяТочка.Date < ПобочнаяТочка.Date)
                {
                    j++;
                    continue;
                }

                if (ПобочнаяТочка.Date < ГлавнаяТочка.Date)
                {
                    k++;
                    continue;
                }

                ИндексГлавной = j;

                ИндексПобочной = k;

                break;
            }

            var НовыеБарыИзПобочной = new CustomStockPointList();

            var СдвигПоВысоте = ((((StockPt)ТочкиГлавнойСерии[ИндексГлавной]).Open + ((StockPt)ТочкиГлавнойСерии[ИндексГлавной]).Close) / 2) - ((((StockPt)ТочкиПобочнойСерии[ИндексПобочной]).Open + ((StockPt)ТочкиПобочнойСерии[ИндексПобочной]).Close) / 2);

            int КатыйJтого = 0;

            //Копирую начало, если есть что копировать
            if (ИндексПобочной > 0)
            {
                for (int k = ИндексПобочной - 1; k >= 0; k--)
                {
                    var ПобочнаяТочка = (StockPt)ТочкиПобочнойСерии[k];

                    //Добовляем точку во временный лист, копируя дату, объём, спред и скорректированные параметры(высота бара)
                    НовыеБарыИзПобочной.Add(new StockPt((XDate)ПобочнаяТочка.Date, ПобочнаяТочка.High + СдвигПоВысоте, ПобочнаяТочка.Low + СдвигПоВысоте, ПобочнаяТочка.Open + СдвигПоВысоте, ПобочнаяТочка.Close + СдвигПоВысоте, ПобочнаяТочка.Vol, (string)ПобочнаяТочка.Tag));
                }
            }

            //Копирую центр от первого сходства
            for (int j = ИндексГлавной, k = ИндексПобочной; j < ТочкиГлавнойСерии.Count && k < ТочкиПобочнойСерии.Count;)
            {
                var ГлавнаяТочка = (StockPt)ТочкиГлавнойСерии[j];

                var ПобочнаяТочка = (StockPt)ТочкиПобочнойСерии[k];

                //Если отстаём
                if (ГлавнаяТочка.Date < ПобочнаяТочка.Date)
                {
                    j++;
                    continue;
                }

                if (ПобочнаяТочка.Date < ГлавнаяТочка.Date)
                {
                    //Добовляем точку во временный лист, копируя дату, объём, спред и скорректированные параметры(высота бара)
                    НовыеБарыИзПобочной.Add(new StockPt((XDate)ПобочнаяТочка.Date, ПобочнаяТочка.High + СдвигПоВысоте, ПобочнаяТочка.Low + СдвигПоВысоте, ПобочнаяТочка.Open + СдвигПоВысоте, ПобочнаяТочка.Close + СдвигПоВысоте, ПобочнаяТочка.Vol, (string)ПобочнаяТочка.Tag));
                    k++;
                    continue;
                }
                КатыйJтого = k;
                j++;
                k++;

            }

            //Копирую конец, если есть что копировать
            if (ТочкиПобочнойСерии.Last().Date > ТочкиГлавнойСерии.Last().Date)
            {
                var ПоследБарГлавСерии = ТочкиГлавнойСерии.Last();

                int ИндесПоследБара = ТочкиПобочнойСерии.Count - 1;

                //Ищем индекс последнего бара донорской серии соответствующий послед бару главной серии
                while (ПоследБарГлавСерии.Date < ((StockPt)ТочкиПобочнойСерии[ИндесПоследБара]).Date)
                    ИндесПоследБара--;


                for (int k = ИндесПоследБара + 1; k < ТочкиПобочнойСерии.Count; k++)
                {
                    var ПобочнаяТочка = (StockPt)ТочкиПобочнойСерии[k];

                    //Добовляем точку во временный лист, копируя дату, объём, спред и скорректированные параметры(высота бара)
                    НовыеБарыИзПобочной.Add(new StockPt((XDate)ПобочнаяТочка.Date, ПобочнаяТочка.High + СдвигПоВысоте, ПобочнаяТочка.Low + СдвигПоВысоте, ПобочнаяТочка.Open + СдвигПоВысоте, ПобочнаяТочка.Close + СдвигПоВысоте, ПобочнаяТочка.Vol, (string)ПобочнаяТочка.Tag));
                }
            }


            MessageBox.Show($"Заменено {НовыеБарыИзПобочной.Count} баров");

            НовыеБарыИзПобочной.Sort((point1, point2) =>
            {
                return point1.Date.CompareTo(point2.Date);
            });

            //Добавляем новые бары в главную серию
            iСписокСерий[1].iТочкиСерии.AddRange(НовыеБарыИзПобочной);

            //Сортируем для корректного отображения + для корректного сохранения
            iСписокСерий[1].iТочкиСерии.Sort((point1, point2) =>
            {
                return point1.Date.CompareTo(point2.Date);
            });


            //TODO убрать этот код позже или переписать
            iСписокСерий.Add(new c_Серия.c_Серия(НовыеБарыИзПобочной, $"СкопированыеБары"));
            ob_График.GraphPane.CurveList.Add(iСписокСерий.Last().iСвечи);
            ob_ЛистБоксСерий.Items.Add("СкопированыеБары", true);

            f_ПерерисоватьГрафик(null);
            fp_ОбновитьНазванияСерий();
        }

        /// <summary>
        /// Осуществляет поиск гепов в главной серии. Гепом считаем, если значение модуля разности закрытия одного бары и открытия следующего
        /// больше, чем (модуль разности открытия и закрытия первого бара) - (модуль разности открытия и закрытия первого бара, умноженный на Критерий Гепа)
        /// Далее вся серия делиться на ЧислоДелений+1 делений и по ним считаеться средний модуля разности закрытия одного бары и открытия следующего.
        /// В итоге показываем все гепы, у которых модуля разности закрытия одного бары и открытия следующего больше, чем средний на этом участке умноженный на Множитель Среднего
        /// </summary>
        public void f_НайтиГепы()
        {
            if (iСписокСерий.Count < 2)
                return;

            var ЛистГепов = new CustomStockPointList();

            var ЛистГепов_Высота = new List<double>();

            for (int i = 0; i < iСписокСерий[1].Count - 1; i++)
            {
                var ТекущийБар = (StockPt)iСписокСерий[1].iТочкиСерии[i];
                var СледБар = (StockPt)iСписокСерий[1].iТочкиСерии[i + 1];

                if (Math.Abs(ТекущийБар.Close - СледБар.Open) > ((Math.Abs(ТекущийБар.Open - ТекущийБар.Close)) - ((Math.Abs(ТекущийБар.Open - ТекущийБар.Close) / (double)ob_КритерийГепа.Value))))
                {
                    ЛистГепов.Add(ТекущийБар);
                    ЛистГепов_Высота.Add(Math.Abs(ТекущийБар.Close - СледБар.Open));
                }
            }

            if (ЛистГепов.Count < 1)
            {
                MessageBox.Show($"Найдено {ЛистГепов.Count} гепов по критерию");
                return;
            }

            int ЧислоДелений = (int)ob_ПоискГепов_ЧислоДелений.Value;

            double[] СреднийГеп = new double[ЧислоДелений + 1];

            int ЧислоБаров = ЛистГепов.Count / ЧислоДелений;

            for (int i = 0; i < СреднийГеп.Length; i++)
            {
                СреднийГеп[i] = ЛистГепов_Высота.Skip(i * ЧислоБаров).Take(ЧислоБаров).Average();
                СреднийГеп[i] *= (double)ob_МножительСреднего.Value;
            }

            var ЛистГепов_Фильтрованный = new CustomStockPointList();

            for (int i = 0; i < ЛистГепов.Count; i++)
            {
                var Точка = (StockPt)iСписокСерий[1].iТочкиСерии[i];

                if (ЛистГепов_Высота[i] > СреднийГеп[i / ЧислоБаров])
                    ЛистГепов_Фильтрованный.Add(ЛистГепов[i]);
            }

            MessageBox.Show($"Найдено {ЛистГепов.Count} гепов по критерию. Считаю гепом, если:\n" +
                $"ВысотаГепа >= ВысотаБара - ВысотаБара / Критерий({ob_КритерийГепа.Value})\n" +
                $"Гепов, разрыв которых больше чем средний * {ob_МножительСреднего.Value} на участе\n" +
                $"НАЙДЕНО: {ЛистГепов_Фильтрованный.Count}(их и отображаем)\n" +
                $"Средний считается каждые {ЧислоБаров}. Число участков(делений) {ЧислоДелений}");

            iИндексТекущейАномальнойТочки = 0;
            iАномальныеТочки = ЛистГепов_Фильтрованный;
        }

        /// <summary>
        /// Вызывает окно выбора палитры для выбора цвета заливки фона графка
        /// </summary>
        public void f_Палитра_ЦветФонаГрафика()
        {
            if (ob_ЦветПалитра.ShowDialog() == DialogResult.OK)
                ob_График.GraphPane.Chart.Fill = new Fill(ob_ЦветПалитра.Color);

            ob_График.Invalidate();
        }

        /// <summary>
        /// Вызывает окно выбора палитры для выбора цвета окантовки графка
        /// </summary>
        public void f_Палитра_ЦветОкантовкиГрафика()
        {
            if (ob_ЦветПалитра.ShowDialog() == DialogResult.OK)
                ob_График.GraphPane.Fill = new Fill(ob_ЦветПалитра.Color);

            ob_График.Invalidate();
        }

        /// <summary>
        /// Вызывает окно выбора палитры для выбора цвета заливки повышения цены свеч
        /// </summary>
        public void f_Палитра_ЦветПовышенияСвечСерии()
        {
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            if (ob_ЦветПалитра.ShowDialog() == DialogResult.OK)
                iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСвечи.Stick.RisingFill.Color = ob_ЦветПалитра.Color;

            ob_График.Invalidate();
        }

        /// <summary>
        /// Вызывает окно выбора палитры для выбора цвета заливки понижения цены свеч
        /// </summary>
        public void f_Палитра_ЦветПониженияСвечСерии()
        {
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            if (ob_ЦветПалитра.ShowDialog() == DialogResult.OK)
                iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСвечи.Stick.FallingFill.Color = ob_ЦветПалитра.Color;

            ob_График.Invalidate();
        }

        /// <summary>
        /// Вызывает окно выбора палитры для выбора цвета оконтовки свеч/баров
        /// </summary>
        public void f_Палитра_ЦветОкантовкиСвечБаровСерии()
        {
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            if (ob_ЦветПалитра.ShowDialog() == DialogResult.OK)
            {
                iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iСвечи.Stick.Color = ob_ЦветПалитра.Color;
                iСписокСерий[ob_ЛистБоксСерий.SelectedIndex].iБары.Bar.Color = ob_ЦветПалитра.Color;
            }    
                

            ob_График.Invalidate();
        }


        /// <summary>
        /// Поднимает выделенную серию в списке серий вверх
        /// </summary>
        public void f_ПоднятьСериюВСписке()
        {
            //если серия не выбрана и выше некуда
            if (ob_ЛистБоксСерий.SelectedIndex < 2)
                return;

            var МеняемаяСерияСтрока = ob_ЛистБоксСерий.Items[ob_ЛистБоксСерий.SelectedIndex];
            ob_ЛистБоксСерий.Items[ob_ЛистБоксСерий.SelectedIndex] = ob_ЛистБоксСерий.Items[ob_ЛистБоксСерий.SelectedIndex - 1];
            ob_ЛистБоксСерий.Items[ob_ЛистБоксСерий.SelectedIndex - 1] = МеняемаяСерияСтрока;

            var МеняемаяСерия = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex];
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex] = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex - 1];
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex - 1] = МеняемаяСерия;

            var МеняемаяСерияОтрисовка = ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex];
            ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex] = ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex - 1];
            ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex - 1] = МеняемаяСерияОтрисовка;

            var ЧекБоксВидимости = ob_ЛистБоксСерий.GetItemChecked(ob_ЛистБоксСерий.SelectedIndex);
            ob_ЛистБоксСерий.SetItemChecked(ob_ЛистБоксСерий.SelectedIndex, ob_ЛистБоксСерий.GetItemChecked(ob_ЛистБоксСерий.SelectedIndex - 1));
            ob_ЛистБоксСерий.SetItemChecked(ob_ЛистБоксСерий.SelectedIndex - 1, ЧекБоксВидимости);

            ob_ЛистБоксСерий.SelectedIndex--;

            fp_ОбновитьНазванияСерий();
        }

        /// <summary>
        /// Опускает выделенную серию в списке серий вниз
        /// </summary>
        public void f_ОпуститьСериюВСписке()
        {
            //если серия не выбрана
            if (ob_ЛистБоксСерий.SelectedIndex < 1)
                return;

            //или ниже некуда
            if (ob_ЛистБоксСерий.SelectedIndex == ob_ЛистБоксСерий.Items.Count - 1)
                return;

            var МеняемаяСерияСтрока = ob_ЛистБоксСерий.Items[ob_ЛистБоксСерий.SelectedIndex];
            ob_ЛистБоксСерий.Items[ob_ЛистБоксСерий.SelectedIndex] = ob_ЛистБоксСерий.Items[ob_ЛистБоксСерий.SelectedIndex + 1];
            ob_ЛистБоксСерий.Items[ob_ЛистБоксСерий.SelectedIndex + 1] = МеняемаяСерияСтрока;

            var МеняемаяСерия = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex];
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex] = iСписокСерий[ob_ЛистБоксСерий.SelectedIndex + 1];
            iСписокСерий[ob_ЛистБоксСерий.SelectedIndex + 1] = МеняемаяСерия;

            var МеняемаяСерияОтрисовка = ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex];
            ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex] = ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex + 1];
            ob_График.GraphPane.CurveList[ob_ЛистБоксСерий.SelectedIndex + 1] = МеняемаяСерияОтрисовка;

            var ЧекБоксВидимости = ob_ЛистБоксСерий.GetItemChecked(ob_ЛистБоксСерий.SelectedIndex);
            ob_ЛистБоксСерий.SetItemChecked(ob_ЛистБоксСерий.SelectedIndex, ob_ЛистБоксСерий.GetItemChecked(ob_ЛистБоксСерий.SelectedIndex + 1));
            ob_ЛистБоксСерий.SetItemChecked(ob_ЛистБоксСерий.SelectedIndex + 1, ЧекБоксВидимости);

            ob_ЛистБоксСерий.SelectedIndex++;

            fp_ОбновитьНазванияСерий();
        }

        /// <summary>
        /// Перемещает экран графика к передануму в метод бару
        /// </summary>
        /// <param name="_Бар">Бар, который надо показать</param>
        private void fp_ПоказатьБар(StockPt _Бар, int _ОтступМинутБока = 8)
        {
            var ОтступВлево = (XDate)_Бар.Date;
            ОтступВлево.AddMinutes(-_ОтступМинутБока);

            var ОтступВправо = (XDate)_Бар.Date;
            ОтступВправо.AddMinutes(_ОтступМинутБока);

            
            ob_График.GraphPane.XAxis.Scale.Min = ОтступВлево;
            ob_График.GraphPane.XAxis.Scale.Max = ОтступВправо;   

            iВыбранныйБар = (StockPt)iАномальныеТочки[iИндексТекущейАномальнойТочки];

            ob_ЦенаОтрытияБара.Value = (decimal)iВыбранныйБар.Open;
            ob_ЦенаМаксБара.Value = (decimal)iВыбранныйБар.High;
            ob_ЦенаМинБара.Value = (decimal)iВыбранныйБар.Low;
            ob_ЦенаЗакрытияБара.Value = (decimal)iВыбранныйБар.Close;
            ob_ОбъёмБара.Value = (decimal)iВыбранныйБар.Vol;



            //Перемещаем визуальный указатель на этот бар
            iУказательНаГрафике.Points[0].X = iВыбранныйБар.Date;
            iУказательНаГрафике.Points[0].Y = iВыбранныйБар.High;

            //Переделать маштабирование
            f_ПерерисоватьГрафик(null);
        }

        /// <summary>
        /// Метод обновляет количество точек всех серий и названия Главной и Донорской серий
        /// </summary>
        private void fp_ОбновитьНазванияСерий()
        {
            if (iСписокСерий.Count < 2)
                return;

            var ИмяСерии = $"{iСписокСерий[1].iБары.Label.Text.Split('|').First()}|Главная серия({iСписокСерий[1].Count} баров)";

            iСписокСерий[1].iБары.Label.Text = $"{ИмяСерии}";
            iСписокСерий[1].iСвечи.Label.Text = $"{ИмяСерии}";
            ob_ЛистБоксСерий.Items[1] = $"{ИмяСерии}";


            if (iСписокСерий.Count < 3)
                return;

            ИмяСерии = $"{iСписокСерий[2].iБары.Label.Text.Split('|').First()}|Донорская серия({iСписокСерий[2].Count} баров)";

            iСписокСерий[2].iБары.Label.Text = $"{ИмяСерии}";
            iСписокСерий[2].iСвечи.Label.Text = $"{ИмяСерии}";
            ob_ЛистБоксСерий.Items[2] = $"{ИмяСерии}";

            for (int i = 3; i < iСписокСерий.Count; i++)
            {
                ИмяСерии = $"{iСписокСерий[i].iБары.Label.Text.Split('|').First()}|{String.Empty}({iСписокСерий[i].Count} баров)";

                iСписокСерий[i].iБары.Label.Text = $"{ИмяСерии}";
                iСписокСерий[i].iСвечи.Label.Text = $"{ИмяСерии}";
                ob_ЛистБоксСерий.Items[i] = $"{ИмяСерии}";
            }

            ob_График.Invalidate();
        }
    }
}
