using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace АнализГрафиков.Окна.c_ОкноПоискАномальныхБаров
{
    public partial class c_ОкноПоискАномальныхБаров : Form
    {
        public c_ОкноПоискАномальныхБаров(decimal _КритерийРасхожденияМеждуБарами, bool _УчитыватьНулевыеБары, decimal _КритерийНулевогоБара)
        {
            InitializeComponent();

            ob_АномальныеБары_КритерийРасхождения.Value = _КритерийРасхожденияМеждуБарами;
            ob_АномальныеБары_ИгнорироватьНулевыеБары.Checked = _УчитыватьНулевыеБары;
            ob_АномальныеБары_КритерийНулевогоБара.Value = _КритерийНулевогоБара;

            if (!ob_АномальныеБары_ИгнорироватьНулевыеБары.Checked)
            {
                ob_АномальныеБары_КритерийНулевогоБара.Enabled = false;
                ob_АномальныеБары_КритерийНулевогоБараТекст.Enabled = false;
            }

            ob_ВсплывающаяПодсказка.SetToolTip(ob_АномальныеБары_КритерийРасхождения,
                "Если высота бара (цена открытия - цена закрытия) отличается (больше или меньше) высоты донорского бара в критерий_расхождения раз, то такой бар считается аномальным");
            ob_ВсплывающаяПодсказка.SetToolTip(ob_АномальныеБары_ИгнорироватьНулевыеБары,
                "Да - нулевые бары учитываются алгоритмом поиска аномальных баров\n" +
                "Нет - нулевые бары не учитываются алгоритмом поиска аномальных баров");
            ob_ВсплывающаяПодсказка.SetToolTip(ob_АномальныеБары_КритерийНулевогоБара,
                "Если высота бара (цена открытия - цена закрытия) меньше средней высоты бара на участке(1440 баров) в критерий_нулевого_бара раз, то такой бар считается нулевым");
        }

        public decimal iКритерийРасхождения { get => ob_АномальныеБары_КритерийРасхождения.Value; }
        public decimal iКритерийНулевогоБара { get => ob_АномальныеБары_КритерийНулевогоБара.Value; }
        public bool iИгнорироватьНулевыеБары { get => ob_АномальныеБары_ИгнорироватьНулевыеБары.Checked; }


        private void e_АномальныеБары_ИгнорироватьНулевыеБары_CheckedChanged(object sender, EventArgs e)
        {
            if (ob_АномальныеБары_ИгнорироватьНулевыеБары.Checked)
            {
                ob_АномальныеБары_КритерийНулевогоБара.Enabled = true;
                ob_АномальныеБары_КритерийНулевогоБараТекст.Enabled = true;
            }
            else
            {
                ob_АномальныеБары_КритерийНулевогоБара.Enabled = false;
                ob_АномальныеБары_КритерийНулевогоБараТекст.Enabled = false;
            }
        }
    }
}
