using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace АнализГрафиков.Окна.c_ОкноПоискаГепов
{
    public partial class c_ОкноПоискаГепов : Form
    {
        public c_ОкноПоискаГепов(bool _ИгноритьЭталон, decimal _КритерийГепа, decimal _МножСреднего, decimal _ЧислоДелений, decimal _КритерийСжожестиГеповЭталона)
        {
            InitializeComponent();

            ob_ПоискГепов_КритерийГепа.Value = _КритерийГепа;
            ob_ПоискГепов_ЧислоДелений.Value = _ЧислоДелений;
            ob_ПоискГепов_МножительСреднего.Value = _МножСреднего;
            ob_ПоискГепов_ИгноритьЭталон.Checked = _ИгноритьЭталон;
            ob_ПоискГепов_КритерийСхожестиГепов.Value = _КритерийСжожестиГеповЭталона;

            if (!ob_ПоискГепов_ИгноритьЭталон.Checked)
            {
                ob_ПоискГепов_КритерийСхожестиГепов.Enabled = false;
                ob_ПоискГепов_КритерийСхожестиГеповТекст.Enabled = false;
            }

            

            ob_ВсплывающаяПодсказка.SetToolTip(ob_ПоискГепов_ИгноритьЭталон,
                "Да - Если в донорской серии похожий геп на том же месте, то он игнорируется(не отображается)\n" +
                "Нет - Если в донорской серии похожий геп на том же месте, то он отображается независимо, что там в донорской");
            ob_ВсплывающаяПодсказка.SetToolTip(ob_ПоискГепов_КритерийГепа,
                "Критерий, по которому считаеться, что являеться гепом\n" +
                "Разрыв между барами считаем гепом, если разрыв > высота бара - (высота бара / критерий гепа)\n" +
                "Т.е. если критерий = 1, то любой разрыв, где цена закрытия одного и открытия друго отличаються будет считаться гепом");
            ob_ВсплывающаяПодсказка.SetToolTip(ob_ПоискГепов_ЧислоДелений,
                "Дней в промежутке, по котому будет считатся средний геп");
            ob_ВсплывающаяПодсказка.SetToolTip(ob_ПоискГепов_МножительСреднего,
                "Множитель для среднего гепа\n" +
                "Отображаем гепы, если разрыв > средний_разрыв * МножительСреднего");

            ob_ВсплывающаяПодсказка.SetToolTip(ob_ПоискГепов_КритерийСхожестиГепов,
                "Критерий схожести для гепов донорской\n" +
                "Если соответствущий геп донорской < гепа главной в критерий_схожести_гепов раз, то такой геп игнорируется");
            
        }

        public decimal iКритерийГепа { get => ob_ПоискГепов_КритерийГепа.Value; }
        public decimal iЧислоДнейВДелении { get => ob_ПоискГепов_ЧислоДелений.Value; }
        public decimal iМножСреднего { get => ob_ПоискГепов_МножительСреднего.Value; }
        public decimal iКритерийСжожестиГеповЭталона { get => ob_ПоискГепов_КритерийСхожестиГепов.Value; }
        public bool iИгноритьЭталон { get => ob_ПоискГепов_ИгноритьЭталон.Checked; }



        private void e_ПоискГепов_ИгноритьЭталон_CheckedChanged(object sender, EventArgs e)
        {
            if (ob_ПоискГепов_ИгноритьЭталон.Checked)
            {
                ob_ПоискГепов_КритерийСхожестиГепов.Enabled = true;
                ob_ПоискГепов_КритерийСхожестиГеповТекст.Enabled = true;
            }
            else
            {
                ob_ПоискГепов_КритерийСхожестиГепов.Enabled = false;
                ob_ПоискГепов_КритерийСхожестиГеповТекст.Enabled = false;
            }
        }
    }
}
